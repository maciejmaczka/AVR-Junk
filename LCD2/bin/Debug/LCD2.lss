
bin/Debug/LCD2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000298e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  0000298e  00002a42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  008000bc  008000bc  00002a9e  2**0
                  ALLOC
  3 .fuse         00000002  00820000  00820000  00002a9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002520  00000000  00000000  00002aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000d14  00000000  00000000  00004fc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 06 	call	0xc18	; 0xc18 <main>
      8a:	0c 94 c5 14 	jmp	0x298a	; 0x298a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_LCD_OutNibble>:
//
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
if(nibbleToWrite & 0x01)
      9e:	89 81       	ldd	r24, Y+1	; 0x01
      a0:	88 2f       	mov	r24, r24
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	81 70       	andi	r24, 0x01	; 1
      a6:	90 70       	andi	r25, 0x00	; 0
      a8:	88 23       	and	r24, r24
      aa:	51 f0       	breq	.+20     	; 0xc0 <_LCD_OutNibble+0x2e>
	LCD_DB4_PORT |= LCD_DB4;
      ac:	8b e3       	ldi	r24, 0x3B	; 59
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	2b e3       	ldi	r18, 0x3B	; 59
      b2:	30 e0       	ldi	r19, 0x00	; 0
      b4:	f9 01       	movw	r30, r18
      b6:	20 81       	ld	r18, Z
      b8:	20 61       	ori	r18, 0x10	; 16
      ba:	fc 01       	movw	r30, r24
      bc:	20 83       	st	Z, r18
      be:	09 c0       	rjmp	.+18     	; 0xd2 <_LCD_OutNibble+0x40>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
      c0:	8b e3       	ldi	r24, 0x3B	; 59
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	2b e3       	ldi	r18, 0x3B	; 59
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	2f 7e       	andi	r18, 0xEF	; 239
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18

if(nibbleToWrite & 0x02)
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	88 2f       	mov	r24, r24
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	82 70       	andi	r24, 0x02	; 2
      da:	90 70       	andi	r25, 0x00	; 0
      dc:	00 97       	sbiw	r24, 0x00	; 0
      de:	51 f0       	breq	.+20     	; 0xf4 <_LCD_OutNibble+0x62>
	LCD_DB5_PORT |= LCD_DB5;
      e0:	8b e3       	ldi	r24, 0x3B	; 59
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	2b e3       	ldi	r18, 0x3B	; 59
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	20 81       	ld	r18, Z
      ec:	20 62       	ori	r18, 0x20	; 32
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
      f2:	09 c0       	rjmp	.+18     	; 0x106 <_LCD_OutNibble+0x74>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
      f4:	8b e3       	ldi	r24, 0x3B	; 59
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	2b e3       	ldi	r18, 0x3B	; 59
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	f9 01       	movw	r30, r18
      fe:	20 81       	ld	r18, Z
     100:	2f 7d       	andi	r18, 0xDF	; 223
     102:	fc 01       	movw	r30, r24
     104:	20 83       	st	Z, r18

if(nibbleToWrite & 0x04)
     106:	89 81       	ldd	r24, Y+1	; 0x01
     108:	88 2f       	mov	r24, r24
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	84 70       	andi	r24, 0x04	; 4
     10e:	90 70       	andi	r25, 0x00	; 0
     110:	00 97       	sbiw	r24, 0x00	; 0
     112:	51 f0       	breq	.+20     	; 0x128 <_LCD_OutNibble+0x96>
	LCD_DB6_PORT |= LCD_DB6;
     114:	8b e3       	ldi	r24, 0x3B	; 59
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	2b e3       	ldi	r18, 0x3B	; 59
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	f9 01       	movw	r30, r18
     11e:	20 81       	ld	r18, Z
     120:	20 64       	ori	r18, 0x40	; 64
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
     126:	09 c0       	rjmp	.+18     	; 0x13a <_LCD_OutNibble+0xa8>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     128:	8b e3       	ldi	r24, 0x3B	; 59
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	2b e3       	ldi	r18, 0x3B	; 59
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	f9 01       	movw	r30, r18
     132:	20 81       	ld	r18, Z
     134:	2f 7b       	andi	r18, 0xBF	; 191
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18

if(nibbleToWrite & 0x08)
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	88 2f       	mov	r24, r24
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	88 70       	andi	r24, 0x08	; 8
     142:	90 70       	andi	r25, 0x00	; 0
     144:	00 97       	sbiw	r24, 0x00	; 0
     146:	51 f0       	breq	.+20     	; 0x15c <_LCD_OutNibble+0xca>
	LCD_DB7_PORT |= LCD_DB7;
     148:	8b e3       	ldi	r24, 0x3B	; 59
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	2b e3       	ldi	r18, 0x3B	; 59
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	f9 01       	movw	r30, r18
     152:	20 81       	ld	r18, Z
     154:	20 68       	ori	r18, 0x80	; 128
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
     15a:	09 c0       	rjmp	.+18     	; 0x16e <_LCD_OutNibble+0xdc>
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     15c:	8b e3       	ldi	r24, 0x3B	; 59
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	2b e3       	ldi	r18, 0x3B	; 59
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	f9 01       	movw	r30, r18
     166:	20 81       	ld	r18, Z
     168:	2f 77       	andi	r18, 0x7F	; 127
     16a:	fc 01       	movw	r30, r24
     16c:	20 83       	st	Z, r18
}
     16e:	0f 90       	pop	r0
     170:	cf 91       	pop	r28
     172:	df 91       	pop	r29
     174:	08 95       	ret

00000176 <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	df 93       	push	r29
     17c:	cf 93       	push	r28
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	69 97       	sbiw	r28, 0x19	; 25
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
     18e:	89 8f       	std	Y+25, r24	; 0x19
LCD_E_PORT |= LCD_E;
     190:	8b e3       	ldi	r24, 0x3B	; 59
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	2b e3       	ldi	r18, 0x3B	; 59
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	f9 01       	movw	r30, r18
     19a:	20 81       	ld	r18, Z
     19c:	22 60       	ori	r18, 0x02	; 2
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
_LCD_OutNibble(dataToWrite >> 4);
     1a2:	89 8d       	ldd	r24, Y+25	; 0x19
     1a4:	82 95       	swap	r24
     1a6:	8f 70       	andi	r24, 0x0F	; 15
     1a8:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
     1ac:	8b e3       	ldi	r24, 0x3B	; 59
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	2b e3       	ldi	r18, 0x3B	; 59
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 81       	ld	r18, Z
     1b8:	2d 7f       	andi	r18, 0xFD	; 253
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
LCD_E_PORT |= LCD_E;
     1be:	8b e3       	ldi	r24, 0x3B	; 59
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	2b e3       	ldi	r18, 0x3B	; 59
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	f9 01       	movw	r30, r18
     1c8:	20 81       	ld	r18, Z
     1ca:	22 60       	ori	r18, 0x02	; 2
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 83       	st	Z, r18
_LCD_OutNibble(dataToWrite);
     1d0:	89 8d       	ldd	r24, Y+25	; 0x19
     1d2:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
     1d6:	8b e3       	ldi	r24, 0x3B	; 59
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	2b e3       	ldi	r18, 0x3B	; 59
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	f9 01       	movw	r30, r18
     1e0:	20 81       	ld	r18, Z
     1e2:	2d 7f       	andi	r18, 0xFD	; 253
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 83       	st	Z, r18
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	a8 e4       	ldi	r26, 0x48	; 72
     1ee:	b2 e4       	ldi	r27, 0x42	; 66
     1f0:	89 83       	std	Y+1, r24	; 0x01
     1f2:	9a 83       	std	Y+2, r25	; 0x02
     1f4:	ab 83       	std	Y+3, r26	; 0x03
     1f6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     1f8:	69 81       	ldd	r22, Y+1	; 0x01
     1fa:	7a 81       	ldd	r23, Y+2	; 0x02
     1fc:	8b 81       	ldd	r24, Y+3	; 0x03
     1fe:	9c 81       	ldd	r25, Y+4	; 0x04
     200:	2b ea       	ldi	r18, 0xAB	; 171
     202:	3a ea       	ldi	r19, 0xAA	; 170
     204:	4a ea       	ldi	r20, 0xAA	; 170
     206:	50 e4       	ldi	r21, 0x40	; 64
     208:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     20c:	dc 01       	movw	r26, r24
     20e:	cb 01       	movw	r24, r22
     210:	8d 83       	std	Y+5, r24	; 0x05
     212:	9e 83       	std	Y+6, r25	; 0x06
     214:	af 83       	std	Y+7, r26	; 0x07
     216:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     218:	11 e0       	ldi	r17, 0x01	; 1
     21a:	6d 81       	ldd	r22, Y+5	; 0x05
     21c:	7e 81       	ldd	r23, Y+6	; 0x06
     21e:	8f 81       	ldd	r24, Y+7	; 0x07
     220:	98 85       	ldd	r25, Y+8	; 0x08
     222:	20 e0       	ldi	r18, 0x00	; 0
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	40 e8       	ldi	r20, 0x80	; 128
     228:	5f e3       	ldi	r21, 0x3F	; 63
     22a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
     22e:	88 23       	and	r24, r24
     230:	0c f0       	brlt	.+2      	; 0x234 <_LCD_Write+0xbe>
     232:	10 e0       	ldi	r17, 0x00	; 0
     234:	11 23       	and	r17, r17
     236:	19 f0       	breq	.+6      	; 0x23e <_LCD_Write+0xc8>
		__ticks = 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	89 87       	std	Y+9, r24	; 0x09
     23c:	a3 c0       	rjmp	.+326    	; 0x384 <_LCD_Write+0x20e>
	else if (__tmp > 255)
     23e:	11 e0       	ldi	r17, 0x01	; 1
     240:	6d 81       	ldd	r22, Y+5	; 0x05
     242:	7e 81       	ldd	r23, Y+6	; 0x06
     244:	8f 81       	ldd	r24, Y+7	; 0x07
     246:	98 85       	ldd	r25, Y+8	; 0x08
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	4f e7       	ldi	r20, 0x7F	; 127
     24e:	53 e4       	ldi	r21, 0x43	; 67
     250:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
     254:	18 16       	cp	r1, r24
     256:	0c f0       	brlt	.+2      	; 0x25a <_LCD_Write+0xe4>
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	11 23       	and	r17, r17
     25c:	09 f4       	brne	.+2      	; 0x260 <_LCD_Write+0xea>
     25e:	89 c0       	rjmp	.+274    	; 0x372 <_LCD_Write+0x1fc>
	{
		_delay_ms(__us / 1000.0);
     260:	69 81       	ldd	r22, Y+1	; 0x01
     262:	7a 81       	ldd	r23, Y+2	; 0x02
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	9c 81       	ldd	r25, Y+4	; 0x04
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	4a e7       	ldi	r20, 0x7A	; 122
     26e:	54 e4       	ldi	r21, 0x44	; 68
     270:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__divsf3>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	8a 87       	std	Y+10, r24	; 0x0a
     27a:	9b 87       	std	Y+11, r25	; 0x0b
     27c:	ac 87       	std	Y+12, r26	; 0x0c
     27e:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     280:	6a 85       	ldd	r22, Y+10	; 0x0a
     282:	7b 85       	ldd	r23, Y+11	; 0x0b
     284:	8c 85       	ldd	r24, Y+12	; 0x0c
     286:	9d 85       	ldd	r25, Y+13	; 0x0d
     288:	20 e0       	ldi	r18, 0x00	; 0
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	4a e7       	ldi	r20, 0x7A	; 122
     28e:	55 e4       	ldi	r21, 0x45	; 69
     290:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	8e 87       	std	Y+14, r24	; 0x0e
     29a:	9f 87       	std	Y+15, r25	; 0x0f
     29c:	a8 8b       	std	Y+16, r26	; 0x10
     29e:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     2a0:	11 e0       	ldi	r17, 0x01	; 1
     2a2:	6e 85       	ldd	r22, Y+14	; 0x0e
     2a4:	7f 85       	ldd	r23, Y+15	; 0x0f
     2a6:	88 89       	ldd	r24, Y+16	; 0x10
     2a8:	99 89       	ldd	r25, Y+17	; 0x11
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e8       	ldi	r20, 0x80	; 128
     2b0:	5f e3       	ldi	r21, 0x3F	; 63
     2b2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
     2b6:	88 23       	and	r24, r24
     2b8:	0c f0       	brlt	.+2      	; 0x2bc <_LCD_Write+0x146>
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	11 23       	and	r17, r17
     2be:	29 f0       	breq	.+10     	; 0x2ca <_LCD_Write+0x154>
		__ticks = 1;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	9b 8b       	std	Y+19, r25	; 0x13
     2c6:	8a 8b       	std	Y+18, r24	; 0x12
     2c8:	46 c0       	rjmp	.+140    	; 0x356 <_LCD_Write+0x1e0>
	else if (__tmp > 65535)
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	6e 85       	ldd	r22, Y+14	; 0x0e
     2ce:	7f 85       	ldd	r23, Y+15	; 0x0f
     2d0:	88 89       	ldd	r24, Y+16	; 0x10
     2d2:	99 89       	ldd	r25, Y+17	; 0x11
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	3f ef       	ldi	r19, 0xFF	; 255
     2d8:	4f e7       	ldi	r20, 0x7F	; 127
     2da:	57 e4       	ldi	r21, 0x47	; 71
     2dc:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
     2e0:	18 16       	cp	r1, r24
     2e2:	0c f0       	brlt	.+2      	; 0x2e6 <_LCD_Write+0x170>
     2e4:	10 e0       	ldi	r17, 0x00	; 0
     2e6:	11 23       	and	r17, r17
     2e8:	61 f1       	breq	.+88     	; 0x342 <_LCD_Write+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2ea:	6a 85       	ldd	r22, Y+10	; 0x0a
     2ec:	7b 85       	ldd	r23, Y+11	; 0x0b
     2ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     2f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	40 e2       	ldi	r20, 0x20	; 32
     2f8:	51 e4       	ldi	r21, 0x41	; 65
     2fa:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     2fe:	dc 01       	movw	r26, r24
     300:	cb 01       	movw	r24, r22
     302:	bc 01       	movw	r22, r24
     304:	cd 01       	movw	r24, r26
     306:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     30a:	dc 01       	movw	r26, r24
     30c:	cb 01       	movw	r24, r22
     30e:	9b 8b       	std	Y+19, r25	; 0x13
     310:	8a 8b       	std	Y+18, r24	; 0x12
     312:	12 c0       	rjmp	.+36     	; 0x338 <_LCD_Write+0x1c2>
     314:	80 e9       	ldi	r24, 0x90	; 144
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	9d 8b       	std	Y+21, r25	; 0x15
     31a:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     31c:	8c 89       	ldd	r24, Y+20	; 0x14
     31e:	9d 89       	ldd	r25, Y+21	; 0x15
     320:	8c 01       	movw	r16, r24
     322:	c8 01       	movw	r24, r16
     324:	01 97       	sbiw	r24, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <_LCD_Write+0x1ae>
     328:	8c 01       	movw	r16, r24
     32a:	1d 8b       	std	Y+21, r17	; 0x15
     32c:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     32e:	8a 89       	ldd	r24, Y+18	; 0x12
     330:	9b 89       	ldd	r25, Y+19	; 0x13
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	9b 8b       	std	Y+19, r25	; 0x13
     336:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     338:	8a 89       	ldd	r24, Y+18	; 0x12
     33a:	9b 89       	ldd	r25, Y+19	; 0x13
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	51 f7       	brne	.-44     	; 0x314 <_LCD_Write+0x19e>
     340:	28 c0       	rjmp	.+80     	; 0x392 <_LCD_Write+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     342:	6e 85       	ldd	r22, Y+14	; 0x0e
     344:	7f 85       	ldd	r23, Y+15	; 0x0f
     346:	88 89       	ldd	r24, Y+16	; 0x10
     348:	99 89       	ldd	r25, Y+17	; 0x11
     34a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	9b 8b       	std	Y+19, r25	; 0x13
     354:	8a 8b       	std	Y+18, r24	; 0x12
     356:	8a 89       	ldd	r24, Y+18	; 0x12
     358:	9b 89       	ldd	r25, Y+19	; 0x13
     35a:	9f 8b       	std	Y+23, r25	; 0x17
     35c:	8e 8b       	std	Y+22, r24	; 0x16
     35e:	8e 89       	ldd	r24, Y+22	; 0x16
     360:	9f 89       	ldd	r25, Y+23	; 0x17
     362:	8c 01       	movw	r16, r24
     364:	f8 01       	movw	r30, r16
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <_LCD_Write+0x1f0>
     36a:	8f 01       	movw	r16, r30
     36c:	1f 8b       	std	Y+23, r17	; 0x17
     36e:	0e 8b       	std	Y+22, r16	; 0x16
     370:	10 c0       	rjmp	.+32     	; 0x392 <_LCD_Write+0x21c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     372:	6d 81       	ldd	r22, Y+5	; 0x05
     374:	7e 81       	ldd	r23, Y+6	; 0x06
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	98 85       	ldd	r25, Y+8	; 0x08
     37a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	89 87       	std	Y+9, r24	; 0x09
     384:	89 85       	ldd	r24, Y+9	; 0x09
     386:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     388:	88 8d       	ldd	r24, Y+24	; 0x18
     38a:	18 2f       	mov	r17, r24
     38c:	1a 95       	dec	r17
     38e:	f1 f7       	brne	.-4      	; 0x38c <_LCD_Write+0x216>
     390:	18 8f       	std	Y+24, r17	; 0x18
_delay_us(50);
}
     392:	69 96       	adiw	r28, 0x19	; 25
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	cf 91       	pop	r28
     3a0:	df 91       	pop	r29
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <LCD_WriteCommand>:
//
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
     3a8:	df 93       	push	r29
     3aa:	cf 93       	push	r28
     3ac:	0f 92       	push	r0
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	89 83       	std	Y+1, r24	; 0x01
LCD_RS_PORT &= ~LCD_RS;
     3b4:	8b e3       	ldi	r24, 0x3B	; 59
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	2b e3       	ldi	r18, 0x3B	; 59
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	f9 01       	movw	r30, r18
     3be:	20 81       	ld	r18, Z
     3c0:	2b 7f       	andi	r18, 0xFB	; 251
     3c2:	fc 01       	movw	r30, r24
     3c4:	20 83       	st	Z, r18
_LCD_Write(commandToWrite);
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	0e 94 bb 00 	call	0x176	; 0x176 <_LCD_Write>
}
     3cc:	0f 90       	pop	r0
     3ce:	cf 91       	pop	r28
     3d0:	df 91       	pop	r29
     3d2:	08 95       	ret

000003d4 <LCD_WriteData>:
//
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
     3d4:	df 93       	push	r29
     3d6:	cf 93       	push	r28
     3d8:	0f 92       	push	r0
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	89 83       	std	Y+1, r24	; 0x01
LCD_RS_PORT |= LCD_RS;
     3e0:	8b e3       	ldi	r24, 0x3B	; 59
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	2b e3       	ldi	r18, 0x3B	; 59
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	f9 01       	movw	r30, r18
     3ea:	20 81       	ld	r18, Z
     3ec:	24 60       	ori	r18, 0x04	; 4
     3ee:	fc 01       	movw	r30, r24
     3f0:	20 83       	st	Z, r18
_LCD_Write(dataToWrite);
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	0e 94 bb 00 	call	0x176	; 0x176 <_LCD_Write>
}
     3f8:	0f 90       	pop	r0
     3fa:	cf 91       	pop	r28
     3fc:	df 91       	pop	r29
     3fe:	08 95       	ret

00000400 <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
     400:	df 93       	push	r29
     402:	cf 93       	push	r28
     404:	00 d0       	rcall	.+0      	; 0x406 <LCD_WriteText+0x6>
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	89 83       	std	Y+1, r24	; 0x01
while(*text)
     40e:	0d c0       	rjmp	.+26     	; 0x42a <LCD_WriteText+0x2a>
  LCD_WriteData(*text++);
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	fc 01       	movw	r30, r24
     416:	80 81       	ld	r24, Z
     418:	28 2f       	mov	r18, r24
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	9a 81       	ldd	r25, Y+2	; 0x02
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01
     424:	82 2f       	mov	r24, r18
     426:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_WriteData>
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
while(*text)
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	9a 81       	ldd	r25, Y+2	; 0x02
     42e:	fc 01       	movw	r30, r24
     430:	80 81       	ld	r24, Z
     432:	88 23       	and	r24, r24
     434:	69 f7       	brne	.-38     	; 0x410 <LCD_WriteText+0x10>
  LCD_WriteData(*text++);
}
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	cf 91       	pop	r28
     43c:	df 91       	pop	r29
     43e:	08 95       	ret

00000440 <LCD_GoTo>:
//
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
     440:	df 93       	push	r29
     442:	cf 93       	push	r28
     444:	00 d0       	rcall	.+0      	; 0x446 <LCD_GoTo+0x6>
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	89 83       	std	Y+1, r24	; 0x01
     44c:	6a 83       	std	Y+2, r22	; 0x02
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	98 2f       	mov	r25, r24
     452:	92 95       	swap	r25
     454:	99 0f       	add	r25, r25
     456:	99 0f       	add	r25, r25
     458:	90 7c       	andi	r25, 0xC0	; 192
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	89 0f       	add	r24, r25
     45e:	80 68       	ori	r24, 0x80	; 128
     460:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
}
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	08 95       	ret

0000046e <LCD_Clear>:
//
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	df 93       	push	r29
     474:	cf 93       	push	r28
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	2e 97       	sbiw	r28, 0x0e	; 14
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
LCD_WriteCommand(HD44780_CLEAR);
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	a0 e0       	ldi	r26, 0x00	; 0
     492:	b0 e4       	ldi	r27, 0x40	; 64
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	9a 83       	std	Y+2, r25	; 0x02
     498:	ab 83       	std	Y+3, r26	; 0x03
     49a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     49c:	69 81       	ldd	r22, Y+1	; 0x01
     49e:	7a 81       	ldd	r23, Y+2	; 0x02
     4a0:	8b 81       	ldd	r24, Y+3	; 0x03
     4a2:	9c 81       	ldd	r25, Y+4	; 0x04
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	4a e7       	ldi	r20, 0x7A	; 122
     4aa:	55 e4       	ldi	r21, 0x45	; 69
     4ac:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     4b0:	dc 01       	movw	r26, r24
     4b2:	cb 01       	movw	r24, r22
     4b4:	8d 83       	std	Y+5, r24	; 0x05
     4b6:	9e 83       	std	Y+6, r25	; 0x06
     4b8:	af 83       	std	Y+7, r26	; 0x07
     4ba:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     4bc:	11 e0       	ldi	r17, 0x01	; 1
     4be:	6d 81       	ldd	r22, Y+5	; 0x05
     4c0:	7e 81       	ldd	r23, Y+6	; 0x06
     4c2:	8f 81       	ldd	r24, Y+7	; 0x07
     4c4:	98 85       	ldd	r25, Y+8	; 0x08
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e8       	ldi	r20, 0x80	; 128
     4cc:	5f e3       	ldi	r21, 0x3F	; 63
     4ce:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
     4d2:	88 23       	and	r24, r24
     4d4:	0c f0       	brlt	.+2      	; 0x4d8 <LCD_Clear+0x6a>
     4d6:	10 e0       	ldi	r17, 0x00	; 0
     4d8:	11 23       	and	r17, r17
     4da:	29 f0       	breq	.+10     	; 0x4e6 <LCD_Clear+0x78>
		__ticks = 1;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	9a 87       	std	Y+10, r25	; 0x0a
     4e2:	89 87       	std	Y+9, r24	; 0x09
     4e4:	46 c0       	rjmp	.+140    	; 0x572 <LCD_Clear+0x104>
	else if (__tmp > 65535)
     4e6:	11 e0       	ldi	r17, 0x01	; 1
     4e8:	6d 81       	ldd	r22, Y+5	; 0x05
     4ea:	7e 81       	ldd	r23, Y+6	; 0x06
     4ec:	8f 81       	ldd	r24, Y+7	; 0x07
     4ee:	98 85       	ldd	r25, Y+8	; 0x08
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	3f ef       	ldi	r19, 0xFF	; 255
     4f4:	4f e7       	ldi	r20, 0x7F	; 127
     4f6:	57 e4       	ldi	r21, 0x47	; 71
     4f8:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
     4fc:	18 16       	cp	r1, r24
     4fe:	0c f0       	brlt	.+2      	; 0x502 <LCD_Clear+0x94>
     500:	10 e0       	ldi	r17, 0x00	; 0
     502:	11 23       	and	r17, r17
     504:	61 f1       	breq	.+88     	; 0x55e <LCD_Clear+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     506:	69 81       	ldd	r22, Y+1	; 0x01
     508:	7a 81       	ldd	r23, Y+2	; 0x02
     50a:	8b 81       	ldd	r24, Y+3	; 0x03
     50c:	9c 81       	ldd	r25, Y+4	; 0x04
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	40 e2       	ldi	r20, 0x20	; 32
     514:	51 e4       	ldi	r21, 0x41	; 65
     516:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	bc 01       	movw	r22, r24
     520:	cd 01       	movw	r24, r26
     522:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     526:	dc 01       	movw	r26, r24
     528:	cb 01       	movw	r24, r22
     52a:	9a 87       	std	Y+10, r25	; 0x0a
     52c:	89 87       	std	Y+9, r24	; 0x09
     52e:	12 c0       	rjmp	.+36     	; 0x554 <LCD_Clear+0xe6>
     530:	80 e9       	ldi	r24, 0x90	; 144
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	9c 87       	std	Y+12, r25	; 0x0c
     536:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     538:	8b 85       	ldd	r24, Y+11	; 0x0b
     53a:	9c 85       	ldd	r25, Y+12	; 0x0c
     53c:	8c 01       	movw	r16, r24
     53e:	c8 01       	movw	r24, r16
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <LCD_Clear+0xd2>
     544:	8c 01       	movw	r16, r24
     546:	1c 87       	std	Y+12, r17	; 0x0c
     548:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     54a:	89 85       	ldd	r24, Y+9	; 0x09
     54c:	9a 85       	ldd	r25, Y+10	; 0x0a
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	9a 87       	std	Y+10, r25	; 0x0a
     552:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     554:	89 85       	ldd	r24, Y+9	; 0x09
     556:	9a 85       	ldd	r25, Y+10	; 0x0a
     558:	00 97       	sbiw	r24, 0x00	; 0
     55a:	51 f7       	brne	.-44     	; 0x530 <LCD_Clear+0xc2>
     55c:	17 c0       	rjmp	.+46     	; 0x58c <LCD_Clear+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     55e:	6d 81       	ldd	r22, Y+5	; 0x05
     560:	7e 81       	ldd	r23, Y+6	; 0x06
     562:	8f 81       	ldd	r24, Y+7	; 0x07
     564:	98 85       	ldd	r25, Y+8	; 0x08
     566:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	9a 87       	std	Y+10, r25	; 0x0a
     570:	89 87       	std	Y+9, r24	; 0x09
     572:	89 85       	ldd	r24, Y+9	; 0x09
     574:	9a 85       	ldd	r25, Y+10	; 0x0a
     576:	9e 87       	std	Y+14, r25	; 0x0e
     578:	8d 87       	std	Y+13, r24	; 0x0d
     57a:	8d 85       	ldd	r24, Y+13	; 0x0d
     57c:	9e 85       	ldd	r25, Y+14	; 0x0e
     57e:	8c 01       	movw	r16, r24
     580:	c8 01       	movw	r24, r16
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <LCD_Clear+0x114>
     586:	8c 01       	movw	r16, r24
     588:	1e 87       	std	Y+14, r17	; 0x0e
     58a:	0d 87       	std	Y+13, r16	; 0x0d
_delay_ms(2);
}
     58c:	2e 96       	adiw	r28, 0x0e	; 14
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	cf 91       	pop	r28
     59a:	df 91       	pop	r29
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	08 95       	ret

000005a2 <LCD_Home>:
//
// Funkcja przywrócenia pocz¹tkowych wspó³rzêdnych wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Home(void)
{
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	df 93       	push	r29
     5a8:	cf 93       	push	r28
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	2e 97       	sbiw	r28, 0x0e	; 14
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
LCD_WriteCommand(HD44780_HOME);
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	a0 e0       	ldi	r26, 0x00	; 0
     5c6:	b0 e4       	ldi	r27, 0x40	; 64
     5c8:	89 83       	std	Y+1, r24	; 0x01
     5ca:	9a 83       	std	Y+2, r25	; 0x02
     5cc:	ab 83       	std	Y+3, r26	; 0x03
     5ce:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     5d0:	69 81       	ldd	r22, Y+1	; 0x01
     5d2:	7a 81       	ldd	r23, Y+2	; 0x02
     5d4:	8b 81       	ldd	r24, Y+3	; 0x03
     5d6:	9c 81       	ldd	r25, Y+4	; 0x04
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	4a e7       	ldi	r20, 0x7A	; 122
     5de:	55 e4       	ldi	r21, 0x45	; 69
     5e0:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	8d 83       	std	Y+5, r24	; 0x05
     5ea:	9e 83       	std	Y+6, r25	; 0x06
     5ec:	af 83       	std	Y+7, r26	; 0x07
     5ee:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5f0:	11 e0       	ldi	r17, 0x01	; 1
     5f2:	6d 81       	ldd	r22, Y+5	; 0x05
     5f4:	7e 81       	ldd	r23, Y+6	; 0x06
     5f6:	8f 81       	ldd	r24, Y+7	; 0x07
     5f8:	98 85       	ldd	r25, Y+8	; 0x08
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e8       	ldi	r20, 0x80	; 128
     600:	5f e3       	ldi	r21, 0x3F	; 63
     602:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
     606:	88 23       	and	r24, r24
     608:	0c f0       	brlt	.+2      	; 0x60c <LCD_Home+0x6a>
     60a:	10 e0       	ldi	r17, 0x00	; 0
     60c:	11 23       	and	r17, r17
     60e:	29 f0       	breq	.+10     	; 0x61a <LCD_Home+0x78>
		__ticks = 1;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	9a 87       	std	Y+10, r25	; 0x0a
     616:	89 87       	std	Y+9, r24	; 0x09
     618:	46 c0       	rjmp	.+140    	; 0x6a6 <LCD_Home+0x104>
	else if (__tmp > 65535)
     61a:	11 e0       	ldi	r17, 0x01	; 1
     61c:	6d 81       	ldd	r22, Y+5	; 0x05
     61e:	7e 81       	ldd	r23, Y+6	; 0x06
     620:	8f 81       	ldd	r24, Y+7	; 0x07
     622:	98 85       	ldd	r25, Y+8	; 0x08
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	3f ef       	ldi	r19, 0xFF	; 255
     628:	4f e7       	ldi	r20, 0x7F	; 127
     62a:	57 e4       	ldi	r21, 0x47	; 71
     62c:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
     630:	18 16       	cp	r1, r24
     632:	0c f0       	brlt	.+2      	; 0x636 <LCD_Home+0x94>
     634:	10 e0       	ldi	r17, 0x00	; 0
     636:	11 23       	and	r17, r17
     638:	61 f1       	breq	.+88     	; 0x692 <LCD_Home+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     63a:	69 81       	ldd	r22, Y+1	; 0x01
     63c:	7a 81       	ldd	r23, Y+2	; 0x02
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	9c 81       	ldd	r25, Y+4	; 0x04
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	40 e2       	ldi	r20, 0x20	; 32
     648:	51 e4       	ldi	r21, 0x41	; 65
     64a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     64e:	dc 01       	movw	r26, r24
     650:	cb 01       	movw	r24, r22
     652:	bc 01       	movw	r22, r24
     654:	cd 01       	movw	r24, r26
     656:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     65a:	dc 01       	movw	r26, r24
     65c:	cb 01       	movw	r24, r22
     65e:	9a 87       	std	Y+10, r25	; 0x0a
     660:	89 87       	std	Y+9, r24	; 0x09
     662:	12 c0       	rjmp	.+36     	; 0x688 <LCD_Home+0xe6>
     664:	80 e9       	ldi	r24, 0x90	; 144
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	9c 87       	std	Y+12, r25	; 0x0c
     66a:	8b 87       	std	Y+11, r24	; 0x0b
     66c:	8b 85       	ldd	r24, Y+11	; 0x0b
     66e:	9c 85       	ldd	r25, Y+12	; 0x0c
     670:	8c 01       	movw	r16, r24
     672:	c8 01       	movw	r24, r16
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <LCD_Home+0xd2>
     678:	8c 01       	movw	r16, r24
     67a:	1c 87       	std	Y+12, r17	; 0x0c
     67c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     67e:	89 85       	ldd	r24, Y+9	; 0x09
     680:	9a 85       	ldd	r25, Y+10	; 0x0a
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	9a 87       	std	Y+10, r25	; 0x0a
     686:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     688:	89 85       	ldd	r24, Y+9	; 0x09
     68a:	9a 85       	ldd	r25, Y+10	; 0x0a
     68c:	00 97       	sbiw	r24, 0x00	; 0
     68e:	51 f7       	brne	.-44     	; 0x664 <LCD_Home+0xc2>
     690:	17 c0       	rjmp	.+46     	; 0x6c0 <LCD_Home+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     692:	6d 81       	ldd	r22, Y+5	; 0x05
     694:	7e 81       	ldd	r23, Y+6	; 0x06
     696:	8f 81       	ldd	r24, Y+7	; 0x07
     698:	98 85       	ldd	r25, Y+8	; 0x08
     69a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     69e:	dc 01       	movw	r26, r24
     6a0:	cb 01       	movw	r24, r22
     6a2:	9a 87       	std	Y+10, r25	; 0x0a
     6a4:	89 87       	std	Y+9, r24	; 0x09
     6a6:	89 85       	ldd	r24, Y+9	; 0x09
     6a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6aa:	9e 87       	std	Y+14, r25	; 0x0e
     6ac:	8d 87       	std	Y+13, r24	; 0x0d
     6ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     6b0:	9e 85       	ldd	r25, Y+14	; 0x0e
     6b2:	8c 01       	movw	r16, r24
     6b4:	c8 01       	movw	r24, r16
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_Home+0x114>
     6ba:	8c 01       	movw	r16, r24
     6bc:	1e 87       	std	Y+14, r17	; 0x0e
     6be:	0d 87       	std	Y+13, r16	; 0x0d
_delay_ms(2);
}
     6c0:	2e 96       	adiw	r28, 0x0e	; 14
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	08 95       	ret

000006d6 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	e9 97       	sbiw	r28, 0x39	; 57
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
     6ee:	8a e3       	ldi	r24, 0x3A	; 58
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	2a e3       	ldi	r18, 0x3A	; 58
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	f9 01       	movw	r30, r18
     6f8:	20 81       	ld	r18, Z
     6fa:	20 61       	ori	r18, 0x10	; 16
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 83       	st	Z, r18
LCD_DB5_DIR |= LCD_DB5; //
     700:	8a e3       	ldi	r24, 0x3A	; 58
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	2a e3       	ldi	r18, 0x3A	; 58
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	f9 01       	movw	r30, r18
     70a:	20 81       	ld	r18, Z
     70c:	20 62       	ori	r18, 0x20	; 32
     70e:	fc 01       	movw	r30, r24
     710:	20 83       	st	Z, r18
LCD_DB6_DIR |= LCD_DB6; //
     712:	8a e3       	ldi	r24, 0x3A	; 58
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	2a e3       	ldi	r18, 0x3A	; 58
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	f9 01       	movw	r30, r18
     71c:	20 81       	ld	r18, Z
     71e:	20 64       	ori	r18, 0x40	; 64
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18
LCD_DB7_DIR |= LCD_DB7; //
     724:	8a e3       	ldi	r24, 0x3A	; 58
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	2a e3       	ldi	r18, 0x3A	; 58
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	f9 01       	movw	r30, r18
     72e:	20 81       	ld	r18, Z
     730:	20 68       	ori	r18, 0x80	; 128
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
LCD_E_DIR 	|= LCD_E;   //
     736:	8a e3       	ldi	r24, 0x3A	; 58
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	2a e3       	ldi	r18, 0x3A	; 58
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	22 60       	ori	r18, 0x02	; 2
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
LCD_RS_DIR 	|= LCD_RS;  //
     748:	8a e3       	ldi	r24, 0x3A	; 58
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	2a e3       	ldi	r18, 0x3A	; 58
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	f9 01       	movw	r30, r18
     752:	20 81       	ld	r18, Z
     754:	24 60       	ori	r18, 0x04	; 4
     756:	fc 01       	movw	r30, r24
     758:	20 83       	st	Z, r18
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	a0 e7       	ldi	r26, 0x70	; 112
     760:	b1 e4       	ldi	r27, 0x41	; 65
     762:	8a 83       	std	Y+2, r24	; 0x02
     764:	9b 83       	std	Y+3, r25	; 0x03
     766:	ac 83       	std	Y+4, r26	; 0x04
     768:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     76a:	6a 81       	ldd	r22, Y+2	; 0x02
     76c:	7b 81       	ldd	r23, Y+3	; 0x03
     76e:	8c 81       	ldd	r24, Y+4	; 0x04
     770:	9d 81       	ldd	r25, Y+5	; 0x05
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	4a e7       	ldi	r20, 0x7A	; 122
     778:	55 e4       	ldi	r21, 0x45	; 69
     77a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	8e 83       	std	Y+6, r24	; 0x06
     784:	9f 83       	std	Y+7, r25	; 0x07
     786:	a8 87       	std	Y+8, r26	; 0x08
     788:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     78a:	11 e0       	ldi	r17, 0x01	; 1
     78c:	6e 81       	ldd	r22, Y+6	; 0x06
     78e:	7f 81       	ldd	r23, Y+7	; 0x07
     790:	88 85       	ldd	r24, Y+8	; 0x08
     792:	99 85       	ldd	r25, Y+9	; 0x09
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e8       	ldi	r20, 0x80	; 128
     79a:	5f e3       	ldi	r21, 0x3F	; 63
     79c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
     7a0:	88 23       	and	r24, r24
     7a2:	0c f0       	brlt	.+2      	; 0x7a6 <LCD_Initalize+0xd0>
     7a4:	10 e0       	ldi	r17, 0x00	; 0
     7a6:	11 23       	and	r17, r17
     7a8:	29 f0       	breq	.+10     	; 0x7b4 <LCD_Initalize+0xde>
		__ticks = 1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9b 87       	std	Y+11, r25	; 0x0b
     7b0:	8a 87       	std	Y+10, r24	; 0x0a
     7b2:	46 c0       	rjmp	.+140    	; 0x840 <LCD_Initalize+0x16a>
	else if (__tmp > 65535)
     7b4:	11 e0       	ldi	r17, 0x01	; 1
     7b6:	6e 81       	ldd	r22, Y+6	; 0x06
     7b8:	7f 81       	ldd	r23, Y+7	; 0x07
     7ba:	88 85       	ldd	r24, Y+8	; 0x08
     7bc:	99 85       	ldd	r25, Y+9	; 0x09
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	3f ef       	ldi	r19, 0xFF	; 255
     7c2:	4f e7       	ldi	r20, 0x7F	; 127
     7c4:	57 e4       	ldi	r21, 0x47	; 71
     7c6:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
     7ca:	18 16       	cp	r1, r24
     7cc:	0c f0       	brlt	.+2      	; 0x7d0 <LCD_Initalize+0xfa>
     7ce:	10 e0       	ldi	r17, 0x00	; 0
     7d0:	11 23       	and	r17, r17
     7d2:	61 f1       	breq	.+88     	; 0x82c <LCD_Initalize+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7d4:	6a 81       	ldd	r22, Y+2	; 0x02
     7d6:	7b 81       	ldd	r23, Y+3	; 0x03
     7d8:	8c 81       	ldd	r24, Y+4	; 0x04
     7da:	9d 81       	ldd	r25, Y+5	; 0x05
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e2       	ldi	r20, 0x20	; 32
     7e2:	51 e4       	ldi	r21, 0x41	; 65
     7e4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	bc 01       	movw	r22, r24
     7ee:	cd 01       	movw	r24, r26
     7f0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	9b 87       	std	Y+11, r25	; 0x0b
     7fa:	8a 87       	std	Y+10, r24	; 0x0a
     7fc:	12 c0       	rjmp	.+36     	; 0x822 <LCD_Initalize+0x14c>
     7fe:	80 e9       	ldi	r24, 0x90	; 144
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	9d 87       	std	Y+13, r25	; 0x0d
     804:	8c 87       	std	Y+12, r24	; 0x0c
     806:	8c 85       	ldd	r24, Y+12	; 0x0c
     808:	9d 85       	ldd	r25, Y+13	; 0x0d
     80a:	8c 01       	movw	r16, r24
     80c:	c8 01       	movw	r24, r16
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <LCD_Initalize+0x138>
     812:	8c 01       	movw	r16, r24
     814:	1d 87       	std	Y+13, r17	; 0x0d
     816:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     818:	8a 85       	ldd	r24, Y+10	; 0x0a
     81a:	9b 85       	ldd	r25, Y+11	; 0x0b
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	9b 87       	std	Y+11, r25	; 0x0b
     820:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     822:	8a 85       	ldd	r24, Y+10	; 0x0a
     824:	9b 85       	ldd	r25, Y+11	; 0x0b
     826:	00 97       	sbiw	r24, 0x00	; 0
     828:	51 f7       	brne	.-44     	; 0x7fe <LCD_Initalize+0x128>
     82a:	17 c0       	rjmp	.+46     	; 0x85a <LCD_Initalize+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     82c:	6e 81       	ldd	r22, Y+6	; 0x06
     82e:	7f 81       	ldd	r23, Y+7	; 0x07
     830:	88 85       	ldd	r24, Y+8	; 0x08
     832:	99 85       	ldd	r25, Y+9	; 0x09
     834:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	9b 87       	std	Y+11, r25	; 0x0b
     83e:	8a 87       	std	Y+10, r24	; 0x0a
     840:	8a 85       	ldd	r24, Y+10	; 0x0a
     842:	9b 85       	ldd	r25, Y+11	; 0x0b
     844:	9f 87       	std	Y+15, r25	; 0x0f
     846:	8e 87       	std	Y+14, r24	; 0x0e
     848:	8e 85       	ldd	r24, Y+14	; 0x0e
     84a:	9f 85       	ldd	r25, Y+15	; 0x0f
     84c:	8c 01       	movw	r16, r24
     84e:	f8 01       	movw	r30, r16
     850:	31 97       	sbiw	r30, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <LCD_Initalize+0x17a>
     854:	8f 01       	movw	r16, r30
     856:	1f 87       	std	Y+15, r17	; 0x0f
     858:	0e 87       	std	Y+14, r16	; 0x0e
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
     85a:	8b e3       	ldi	r24, 0x3B	; 59
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	2b e3       	ldi	r18, 0x3B	; 59
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	f9 01       	movw	r30, r18
     864:	20 81       	ld	r18, Z
     866:	2b 7f       	andi	r18, 0xFB	; 251
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
     86c:	8b e3       	ldi	r24, 0x3B	; 59
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2b e3       	ldi	r18, 0x3B	; 59
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	f9 01       	movw	r30, r18
     876:	20 81       	ld	r18, Z
     878:	2d 7f       	andi	r18, 0xFD	; 253
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
     87e:	19 82       	std	Y+1, r1	; 0x01
     880:	98 c0       	rjmp	.+304    	; 0x9b2 <__stack+0x153>
  {
  LCD_E_PORT |= LCD_E; //  E = 1
     882:	8b e3       	ldi	r24, 0x3B	; 59
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	2b e3       	ldi	r18, 0x3B	; 59
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	f9 01       	movw	r30, r18
     88c:	20 81       	ld	r18, Z
     88e:	22 60       	ori	r18, 0x02	; 2
     890:	fc 01       	movw	r30, r24
     892:	20 83       	st	Z, r18
  _LCD_OutNibble(0x03); // tryb 8-bitowy
     894:	83 e0       	ldi	r24, 0x03	; 3
     896:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
     89a:	8b e3       	ldi	r24, 0x3B	; 59
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	2b e3       	ldi	r18, 0x3B	; 59
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	f9 01       	movw	r30, r18
     8a4:	20 81       	ld	r18, Z
     8a6:	2d 7f       	andi	r18, 0xFD	; 253
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	a0 ea       	ldi	r26, 0xA0	; 160
     8b2:	b0 e4       	ldi	r27, 0x40	; 64
     8b4:	88 8b       	std	Y+16, r24	; 0x10
     8b6:	99 8b       	std	Y+17, r25	; 0x11
     8b8:	aa 8b       	std	Y+18, r26	; 0x12
     8ba:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     8bc:	68 89       	ldd	r22, Y+16	; 0x10
     8be:	79 89       	ldd	r23, Y+17	; 0x11
     8c0:	8a 89       	ldd	r24, Y+18	; 0x12
     8c2:	9b 89       	ldd	r25, Y+19	; 0x13
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	4a e7       	ldi	r20, 0x7A	; 122
     8ca:	55 e4       	ldi	r21, 0x45	; 69
     8cc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     8d0:	dc 01       	movw	r26, r24
     8d2:	cb 01       	movw	r24, r22
     8d4:	8c 8b       	std	Y+20, r24	; 0x14
     8d6:	9d 8b       	std	Y+21, r25	; 0x15
     8d8:	ae 8b       	std	Y+22, r26	; 0x16
     8da:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     8dc:	11 e0       	ldi	r17, 0x01	; 1
     8de:	6c 89       	ldd	r22, Y+20	; 0x14
     8e0:	7d 89       	ldd	r23, Y+21	; 0x15
     8e2:	8e 89       	ldd	r24, Y+22	; 0x16
     8e4:	9f 89       	ldd	r25, Y+23	; 0x17
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e8       	ldi	r20, 0x80	; 128
     8ec:	5f e3       	ldi	r21, 0x3F	; 63
     8ee:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
     8f2:	88 23       	and	r24, r24
     8f4:	0c f0       	brlt	.+2      	; 0x8f8 <__stack+0x99>
     8f6:	10 e0       	ldi	r17, 0x00	; 0
     8f8:	11 23       	and	r17, r17
     8fa:	29 f0       	breq	.+10     	; 0x906 <__stack+0xa7>
		__ticks = 1;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	99 8f       	std	Y+25, r25	; 0x19
     902:	88 8f       	std	Y+24, r24	; 0x18
     904:	46 c0       	rjmp	.+140    	; 0x992 <__stack+0x133>
	else if (__tmp > 65535)
     906:	11 e0       	ldi	r17, 0x01	; 1
     908:	6c 89       	ldd	r22, Y+20	; 0x14
     90a:	7d 89       	ldd	r23, Y+21	; 0x15
     90c:	8e 89       	ldd	r24, Y+22	; 0x16
     90e:	9f 89       	ldd	r25, Y+23	; 0x17
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	3f ef       	ldi	r19, 0xFF	; 255
     914:	4f e7       	ldi	r20, 0x7F	; 127
     916:	57 e4       	ldi	r21, 0x47	; 71
     918:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
     91c:	18 16       	cp	r1, r24
     91e:	0c f0       	brlt	.+2      	; 0x922 <__stack+0xc3>
     920:	10 e0       	ldi	r17, 0x00	; 0
     922:	11 23       	and	r17, r17
     924:	61 f1       	breq	.+88     	; 0x97e <__stack+0x11f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     926:	68 89       	ldd	r22, Y+16	; 0x10
     928:	79 89       	ldd	r23, Y+17	; 0x11
     92a:	8a 89       	ldd	r24, Y+18	; 0x12
     92c:	9b 89       	ldd	r25, Y+19	; 0x13
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e2       	ldi	r20, 0x20	; 32
     934:	51 e4       	ldi	r21, 0x41	; 65
     936:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	bc 01       	movw	r22, r24
     940:	cd 01       	movw	r24, r26
     942:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	99 8f       	std	Y+25, r25	; 0x19
     94c:	88 8f       	std	Y+24, r24	; 0x18
     94e:	12 c0       	rjmp	.+36     	; 0x974 <__stack+0x115>
     950:	80 e9       	ldi	r24, 0x90	; 144
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	9b 8f       	std	Y+27, r25	; 0x1b
     956:	8a 8f       	std	Y+26, r24	; 0x1a
     958:	8a 8d       	ldd	r24, Y+26	; 0x1a
     95a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     95c:	8c 01       	movw	r16, r24
     95e:	c8 01       	movw	r24, r16
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	f1 f7       	brne	.-4      	; 0x960 <__stack+0x101>
     964:	8c 01       	movw	r16, r24
     966:	1b 8f       	std	Y+27, r17	; 0x1b
     968:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     96a:	88 8d       	ldd	r24, Y+24	; 0x18
     96c:	99 8d       	ldd	r25, Y+25	; 0x19
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	99 8f       	std	Y+25, r25	; 0x19
     972:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     974:	88 8d       	ldd	r24, Y+24	; 0x18
     976:	99 8d       	ldd	r25, Y+25	; 0x19
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	51 f7       	brne	.-44     	; 0x950 <__stack+0xf1>
     97c:	17 c0       	rjmp	.+46     	; 0x9ac <__stack+0x14d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     97e:	6c 89       	ldd	r22, Y+20	; 0x14
     980:	7d 89       	ldd	r23, Y+21	; 0x15
     982:	8e 89       	ldd	r24, Y+22	; 0x16
     984:	9f 89       	ldd	r25, Y+23	; 0x17
     986:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     98a:	dc 01       	movw	r26, r24
     98c:	cb 01       	movw	r24, r22
     98e:	99 8f       	std	Y+25, r25	; 0x19
     990:	88 8f       	std	Y+24, r24	; 0x18
     992:	88 8d       	ldd	r24, Y+24	; 0x18
     994:	99 8d       	ldd	r25, Y+25	; 0x19
     996:	9d 8f       	std	Y+29, r25	; 0x1d
     998:	8c 8f       	std	Y+28, r24	; 0x1c
     99a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     99c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     99e:	8c 01       	movw	r16, r24
     9a0:	f8 01       	movw	r30, r16
     9a2:	31 97       	sbiw	r30, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <__stack+0x143>
     9a6:	8f 01       	movw	r16, r30
     9a8:	1d 8f       	std	Y+29, r17	; 0x1d
     9aa:	0c 8f       	std	Y+28, r16	; 0x1c
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	8f 5f       	subi	r24, 0xFF	; 255
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	08 f4       	brcc	.+2      	; 0x9ba <__stack+0x15b>
     9b8:	64 cf       	rjmp	.-312    	; 0x882 <__stack+0x23>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
     9ba:	8b e3       	ldi	r24, 0x3B	; 59
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	2b e3       	ldi	r18, 0x3B	; 59
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	f9 01       	movw	r30, r18
     9c4:	20 81       	ld	r18, Z
     9c6:	22 60       	ori	r18, 0x02	; 2
     9c8:	fc 01       	movw	r30, r24
     9ca:	20 83       	st	Z, r18
_LCD_OutNibble(0x02); // tryb 4-bitowy
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
     9d2:	8b e3       	ldi	r24, 0x3B	; 59
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	2b e3       	ldi	r18, 0x3B	; 59
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	f9 01       	movw	r30, r18
     9dc:	20 81       	ld	r18, Z
     9de:	2d 7f       	andi	r18, 0xFD	; 253
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	a0 e8       	ldi	r26, 0x80	; 128
     9ea:	bf e3       	ldi	r27, 0x3F	; 63
     9ec:	8e 8f       	std	Y+30, r24	; 0x1e
     9ee:	9f 8f       	std	Y+31, r25	; 0x1f
     9f0:	a8 a3       	std	Y+32, r26	; 0x20
     9f2:	b9 a3       	std	Y+33, r27	; 0x21
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     9f4:	6e 8d       	ldd	r22, Y+30	; 0x1e
     9f6:	7f 8d       	ldd	r23, Y+31	; 0x1f
     9f8:	88 a1       	ldd	r24, Y+32	; 0x20
     9fa:	99 a1       	ldd	r25, Y+33	; 0x21
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	4a e7       	ldi	r20, 0x7A	; 122
     a02:	55 e4       	ldi	r21, 0x45	; 69
     a04:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	8a a3       	std	Y+34, r24	; 0x22
     a0e:	9b a3       	std	Y+35, r25	; 0x23
     a10:	ac a3       	std	Y+36, r26	; 0x24
     a12:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
     a14:	11 e0       	ldi	r17, 0x01	; 1
     a16:	6a a1       	ldd	r22, Y+34	; 0x22
     a18:	7b a1       	ldd	r23, Y+35	; 0x23
     a1a:	8c a1       	ldd	r24, Y+36	; 0x24
     a1c:	9d a1       	ldd	r25, Y+37	; 0x25
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e8       	ldi	r20, 0x80	; 128
     a24:	5f e3       	ldi	r21, 0x3F	; 63
     a26:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
     a2a:	88 23       	and	r24, r24
     a2c:	0c f0       	brlt	.+2      	; 0xa30 <__stack+0x1d1>
     a2e:	10 e0       	ldi	r17, 0x00	; 0
     a30:	11 23       	and	r17, r17
     a32:	29 f0       	breq	.+10     	; 0xa3e <__stack+0x1df>
		__ticks = 1;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	9f a3       	std	Y+39, r25	; 0x27
     a3a:	8e a3       	std	Y+38, r24	; 0x26
     a3c:	46 c0       	rjmp	.+140    	; 0xaca <__stack+0x26b>
	else if (__tmp > 65535)
     a3e:	11 e0       	ldi	r17, 0x01	; 1
     a40:	6a a1       	ldd	r22, Y+34	; 0x22
     a42:	7b a1       	ldd	r23, Y+35	; 0x23
     a44:	8c a1       	ldd	r24, Y+36	; 0x24
     a46:	9d a1       	ldd	r25, Y+37	; 0x25
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	4f e7       	ldi	r20, 0x7F	; 127
     a4e:	57 e4       	ldi	r21, 0x47	; 71
     a50:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
     a54:	18 16       	cp	r1, r24
     a56:	0c f0       	brlt	.+2      	; 0xa5a <__stack+0x1fb>
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	11 23       	and	r17, r17
     a5c:	61 f1       	breq	.+88     	; 0xab6 <__stack+0x257>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a5e:	6e 8d       	ldd	r22, Y+30	; 0x1e
     a60:	7f 8d       	ldd	r23, Y+31	; 0x1f
     a62:	88 a1       	ldd	r24, Y+32	; 0x20
     a64:	99 a1       	ldd	r25, Y+33	; 0x21
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	40 e2       	ldi	r20, 0x20	; 32
     a6c:	51 e4       	ldi	r21, 0x41	; 65
     a6e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	bc 01       	movw	r22, r24
     a78:	cd 01       	movw	r24, r26
     a7a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     a7e:	dc 01       	movw	r26, r24
     a80:	cb 01       	movw	r24, r22
     a82:	9f a3       	std	Y+39, r25	; 0x27
     a84:	8e a3       	std	Y+38, r24	; 0x26
     a86:	12 c0       	rjmp	.+36     	; 0xaac <__stack+0x24d>
     a88:	80 e9       	ldi	r24, 0x90	; 144
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	99 a7       	std	Y+41, r25	; 0x29
     a8e:	88 a7       	std	Y+40, r24	; 0x28
     a90:	88 a5       	ldd	r24, Y+40	; 0x28
     a92:	99 a5       	ldd	r25, Y+41	; 0x29
     a94:	8c 01       	movw	r16, r24
     a96:	c8 01       	movw	r24, r16
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <__stack+0x239>
     a9c:	8c 01       	movw	r16, r24
     a9e:	19 a7       	std	Y+41, r17	; 0x29
     aa0:	08 a7       	std	Y+40, r16	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa2:	8e a1       	ldd	r24, Y+38	; 0x26
     aa4:	9f a1       	ldd	r25, Y+39	; 0x27
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	9f a3       	std	Y+39, r25	; 0x27
     aaa:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aac:	8e a1       	ldd	r24, Y+38	; 0x26
     aae:	9f a1       	ldd	r25, Y+39	; 0x27
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	51 f7       	brne	.-44     	; 0xa88 <__stack+0x229>
     ab4:	17 c0       	rjmp	.+46     	; 0xae4 <__stack+0x285>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab6:	6a a1       	ldd	r22, Y+34	; 0x22
     ab8:	7b a1       	ldd	r23, Y+35	; 0x23
     aba:	8c a1       	ldd	r24, Y+36	; 0x24
     abc:	9d a1       	ldd	r25, Y+37	; 0x25
     abe:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     ac2:	dc 01       	movw	r26, r24
     ac4:	cb 01       	movw	r24, r22
     ac6:	9f a3       	std	Y+39, r25	; 0x27
     ac8:	8e a3       	std	Y+38, r24	; 0x26
     aca:	8e a1       	ldd	r24, Y+38	; 0x26
     acc:	9f a1       	ldd	r25, Y+39	; 0x27
     ace:	9b a7       	std	Y+43, r25	; 0x2b
     ad0:	8a a7       	std	Y+42, r24	; 0x2a
     ad2:	8a a5       	ldd	r24, Y+42	; 0x2a
     ad4:	9b a5       	ldd	r25, Y+43	; 0x2b
     ad6:	8c 01       	movw	r16, r24
     ad8:	f8 01       	movw	r30, r16
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <__stack+0x27b>
     ade:	8f 01       	movw	r16, r30
     ae0:	1b a7       	std	Y+43, r17	; 0x2b
     ae2:	0a a7       	std	Y+42, r16	; 0x2a

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
     ae4:	88 e2       	ldi	r24, 0x28	; 40
     ae6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
     aea:	88 e0       	ldi	r24, 0x08	; 8
     aec:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e4       	ldi	r27, 0x40	; 64
     afe:	8c a7       	std	Y+44, r24	; 0x2c
     b00:	9d a7       	std	Y+45, r25	; 0x2d
     b02:	ae a7       	std	Y+46, r26	; 0x2e
     b04:	bf a7       	std	Y+47, r27	; 0x2f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b06:	6c a5       	ldd	r22, Y+44	; 0x2c
     b08:	7d a5       	ldd	r23, Y+45	; 0x2d
     b0a:	8e a5       	ldd	r24, Y+46	; 0x2e
     b0c:	9f a5       	ldd	r25, Y+47	; 0x2f
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	4a e7       	ldi	r20, 0x7A	; 122
     b14:	55 e4       	ldi	r21, 0x45	; 69
     b16:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     b1a:	dc 01       	movw	r26, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	88 ab       	std	Y+48, r24	; 0x30
     b20:	99 ab       	std	Y+49, r25	; 0x31
     b22:	aa ab       	std	Y+50, r26	; 0x32
     b24:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
     b26:	11 e0       	ldi	r17, 0x01	; 1
     b28:	68 a9       	ldd	r22, Y+48	; 0x30
     b2a:	79 a9       	ldd	r23, Y+49	; 0x31
     b2c:	8a a9       	ldd	r24, Y+50	; 0x32
     b2e:	9b a9       	ldd	r25, Y+51	; 0x33
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e8       	ldi	r20, 0x80	; 128
     b36:	5f e3       	ldi	r21, 0x3F	; 63
     b38:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
     b3c:	88 23       	and	r24, r24
     b3e:	0c f0       	brlt	.+2      	; 0xb42 <__stack+0x2e3>
     b40:	10 e0       	ldi	r17, 0x00	; 0
     b42:	11 23       	and	r17, r17
     b44:	29 f0       	breq	.+10     	; 0xb50 <__stack+0x2f1>
		__ticks = 1;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	9d ab       	std	Y+53, r25	; 0x35
     b4c:	8c ab       	std	Y+52, r24	; 0x34
     b4e:	46 c0       	rjmp	.+140    	; 0xbdc <__stack+0x37d>
	else if (__tmp > 65535)
     b50:	11 e0       	ldi	r17, 0x01	; 1
     b52:	68 a9       	ldd	r22, Y+48	; 0x30
     b54:	79 a9       	ldd	r23, Y+49	; 0x31
     b56:	8a a9       	ldd	r24, Y+50	; 0x32
     b58:	9b a9       	ldd	r25, Y+51	; 0x33
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	3f ef       	ldi	r19, 0xFF	; 255
     b5e:	4f e7       	ldi	r20, 0x7F	; 127
     b60:	57 e4       	ldi	r21, 0x47	; 71
     b62:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
     b66:	18 16       	cp	r1, r24
     b68:	0c f0       	brlt	.+2      	; 0xb6c <__stack+0x30d>
     b6a:	10 e0       	ldi	r17, 0x00	; 0
     b6c:	11 23       	and	r17, r17
     b6e:	61 f1       	breq	.+88     	; 0xbc8 <__stack+0x369>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b70:	6c a5       	ldd	r22, Y+44	; 0x2c
     b72:	7d a5       	ldd	r23, Y+45	; 0x2d
     b74:	8e a5       	ldd	r24, Y+46	; 0x2e
     b76:	9f a5       	ldd	r25, Y+47	; 0x2f
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e2       	ldi	r20, 0x20	; 32
     b7e:	51 e4       	ldi	r21, 0x41	; 65
     b80:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	bc 01       	movw	r22, r24
     b8a:	cd 01       	movw	r24, r26
     b8c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	9d ab       	std	Y+53, r25	; 0x35
     b96:	8c ab       	std	Y+52, r24	; 0x34
     b98:	12 c0       	rjmp	.+36     	; 0xbbe <__stack+0x35f>
     b9a:	80 e9       	ldi	r24, 0x90	; 144
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	9f ab       	std	Y+55, r25	; 0x37
     ba0:	8e ab       	std	Y+54, r24	; 0x36
     ba2:	8e a9       	ldd	r24, Y+54	; 0x36
     ba4:	9f a9       	ldd	r25, Y+55	; 0x37
     ba6:	8c 01       	movw	r16, r24
     ba8:	c8 01       	movw	r24, r16
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <__stack+0x34b>
     bae:	8c 01       	movw	r16, r24
     bb0:	1f ab       	std	Y+55, r17	; 0x37
     bb2:	0e ab       	std	Y+54, r16	; 0x36
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bb4:	8c a9       	ldd	r24, Y+52	; 0x34
     bb6:	9d a9       	ldd	r25, Y+53	; 0x35
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	9d ab       	std	Y+53, r25	; 0x35
     bbc:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bbe:	8c a9       	ldd	r24, Y+52	; 0x34
     bc0:	9d a9       	ldd	r25, Y+53	; 0x35
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	51 f7       	brne	.-44     	; 0xb9a <__stack+0x33b>
     bc6:	17 c0       	rjmp	.+46     	; 0xbf6 <__stack+0x397>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bc8:	68 a9       	ldd	r22, Y+48	; 0x30
     bca:	79 a9       	ldd	r23, Y+49	; 0x31
     bcc:	8a a9       	ldd	r24, Y+50	; 0x32
     bce:	9b a9       	ldd	r25, Y+51	; 0x33
     bd0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	9d ab       	std	Y+53, r25	; 0x35
     bda:	8c ab       	std	Y+52, r24	; 0x34
     bdc:	8c a9       	ldd	r24, Y+52	; 0x34
     bde:	9d a9       	ldd	r25, Y+53	; 0x35
     be0:	99 af       	std	Y+57, r25	; 0x39
     be2:	88 af       	std	Y+56, r24	; 0x38
     be4:	88 ad       	ldd	r24, Y+56	; 0x38
     be6:	99 ad       	ldd	r25, Y+57	; 0x39
     be8:	8c 01       	movw	r16, r24
     bea:	f8 01       	movw	r30, r16
     bec:	31 97       	sbiw	r30, 0x01	; 1
     bee:	f1 f7       	brne	.-4      	; 0xbec <__stack+0x38d>
     bf0:	8f 01       	movw	r16, r30
     bf2:	19 af       	std	Y+57, r17	; 0x39
     bf4:	08 af       	std	Y+56, r16	; 0x38
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
     bfc:	8c e0       	ldi	r24, 0x0C	; 12
     bfe:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
}
     c02:	e9 96       	adiw	r28, 0x39	; 57
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	08 95       	ret

00000c18 <main>:
char empty[2];

#define INT_0  2;

int main(void)
{
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	c2 57       	subi	r28, 0x72	; 114
     c26:	d0 40       	sbci	r29, 0x00	; 0
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0 ; i < 20 ;i++)
     c32:	1a 82       	std	Y+2, r1	; 0x02
     c34:	19 82       	std	Y+1, r1	; 0x01
     c36:	07 c0       	rjmp	.+14     	; 0xc46 <main+0x2e>
    {

        imie[0] = NULL;
     c38:	10 92 c6 00 	sts	0x00C6, r1

#define INT_0  2;

int main(void)
{
    for (int i = 0 ; i < 20 ;i++)
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	9a 83       	std	Y+2, r25	; 0x02
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	84 31       	cpi	r24, 0x14	; 20
     c4c:	91 05       	cpc	r25, r1
     c4e:	a4 f3       	brlt	.-24     	; 0xc38 <main+0x20>
    }


    // wyjscie na diodze

    DDRB = 0xff;
     c50:	87 e3       	ldi	r24, 0x37	; 55
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	2f ef       	ldi	r18, 0xFF	; 255
     c56:	fc 01       	movw	r30, r24
     c58:	20 83       	st	Z, r18
    PORTB = 0x00;
     c5a:	88 e3       	ldi	r24, 0x38	; 56
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	fc 01       	movw	r30, r24
     c60:	10 82       	st	Z, r1

    // wyjscie na wyswietlaczu

    DDRA = 0xff;
     c62:	8a e3       	ldi	r24, 0x3A	; 58
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	2f ef       	ldi	r18, 0xFF	; 255
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
    PORTA = 0x00;
     c6c:	8b e3       	ldi	r24, 0x3B	; 59
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	fc 01       	movw	r30, r24
     c72:	10 82       	st	Z, r1


    //przerwanie na D

    DDRD = 0x00;
     c74:	81 e3       	ldi	r24, 0x31	; 49
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	fc 01       	movw	r30, r24
     c7a:	10 82       	st	Z, r1
    PORTD = 0xff;
     c7c:	82 e3       	ldi	r24, 0x32	; 50
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	2f ef       	ldi	r18, 0xFF	; 255
     c82:	fc 01       	movw	r30, r24
     c84:	20 83       	st	Z, r18


    PORTD |= 1<<INT_0 ;          // wl. rezystor
     c86:	82 e3       	ldi	r24, 0x32	; 50
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	22 e3       	ldi	r18, 0x32	; 50
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	f9 01       	movw	r30, r18
     c90:	20 81       	ld	r18, Z
     c92:	24 60       	ori	r18, 0x04	; 4
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18

    MCUCR |= (0<<ISC00);    // przerwanie zbocze opadajace
     c98:	85 e5       	ldi	r24, 0x55	; 85
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	25 e5       	ldi	r18, 0x55	; 85
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	f9 01       	movw	r30, r18
     ca2:	20 81       	ld	r18, Z
     ca4:	fc 01       	movw	r30, r24
     ca6:	20 83       	st	Z, r18
    MCUCR |= (0<<ISC01);
     ca8:	85 e5       	ldi	r24, 0x55	; 85
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	25 e5       	ldi	r18, 0x55	; 85
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	f9 01       	movw	r30, r18
     cb2:	20 81       	ld	r18, Z
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18
    GICR |= (1<<INT0);      // przerwanie int0
     cb8:	8b e5       	ldi	r24, 0x5B	; 91
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	2b e5       	ldi	r18, 0x5B	; 91
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	f9 01       	movw	r30, r18
     cc2:	20 81       	ld	r18, Z
     cc4:	20 64       	ori	r18, 0x40	; 64
     cc6:	fc 01       	movw	r30, r24
     cc8:	20 83       	st	Z, r18

    sei();
     cca:	78 94       	sei



    prompt[0] = '|';
     ccc:	8c e7       	ldi	r24, 0x7C	; 124
     cce:	80 93 da 00 	sts	0x00DA, r24
    empty[0] = ' ';
     cd2:	80 e2       	ldi	r24, 0x20	; 32
     cd4:	80 93 dc 00 	sts	0x00DC, r24

    DDRA = 0xff;
     cd8:	8a e3       	ldi	r24, 0x3A	; 58
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	2f ef       	ldi	r18, 0xFF	; 255
     cde:	fc 01       	movw	r30, r24
     ce0:	20 83       	st	Z, r18
    PORTA = 0x00;
     ce2:	8b e3       	ldi	r24, 0x3B	; 59
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	fc 01       	movw	r30, r24
     ce8:	10 82       	st	Z, r1

    LCD_Initalize();
     cea:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <LCD_Initalize>
    LCD_Clear();
     cee:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
    LCD_GoTo(0,0);
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>

    LCD_WriteText("Wpisz imie:");
     cfa:	8d e7       	ldi	r24, 0x7D	; 125
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	a6 e9       	ldi	r26, 0x96	; 150
     d08:	b2 e4       	ldi	r27, 0x42	; 66
     d0a:	8b 83       	std	Y+3, r24	; 0x03
     d0c:	9c 83       	std	Y+4, r25	; 0x04
     d0e:	ad 83       	std	Y+5, r26	; 0x05
     d10:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     d12:	6b 81       	ldd	r22, Y+3	; 0x03
     d14:	7c 81       	ldd	r23, Y+4	; 0x04
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	9e 81       	ldd	r25, Y+6	; 0x06
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	4a e7       	ldi	r20, 0x7A	; 122
     d20:	55 e4       	ldi	r21, 0x45	; 69
     d22:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	8f 83       	std	Y+7, r24	; 0x07
     d2c:	98 87       	std	Y+8, r25	; 0x08
     d2e:	a9 87       	std	Y+9, r26	; 0x09
     d30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d32:	11 e0       	ldi	r17, 0x01	; 1
     d34:	6f 81       	ldd	r22, Y+7	; 0x07
     d36:	78 85       	ldd	r23, Y+8	; 0x08
     d38:	89 85       	ldd	r24, Y+9	; 0x09
     d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 e8       	ldi	r20, 0x80	; 128
     d42:	5f e3       	ldi	r21, 0x3F	; 63
     d44:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
     d48:	88 23       	and	r24, r24
     d4a:	0c f0       	brlt	.+2      	; 0xd4e <main+0x136>
     d4c:	10 e0       	ldi	r17, 0x00	; 0
     d4e:	11 23       	and	r17, r17
     d50:	29 f0       	breq	.+10     	; 0xd5c <main+0x144>
		__ticks = 1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 87       	std	Y+12, r25	; 0x0c
     d58:	8b 87       	std	Y+11, r24	; 0x0b
     d5a:	46 c0       	rjmp	.+140    	; 0xde8 <main+0x1d0>
	else if (__tmp > 65535)
     d5c:	11 e0       	ldi	r17, 0x01	; 1
     d5e:	6f 81       	ldd	r22, Y+7	; 0x07
     d60:	78 85       	ldd	r23, Y+8	; 0x08
     d62:	89 85       	ldd	r24, Y+9	; 0x09
     d64:	9a 85       	ldd	r25, Y+10	; 0x0a
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	3f ef       	ldi	r19, 0xFF	; 255
     d6a:	4f e7       	ldi	r20, 0x7F	; 127
     d6c:	57 e4       	ldi	r21, 0x47	; 71
     d6e:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
     d72:	18 16       	cp	r1, r24
     d74:	0c f0       	brlt	.+2      	; 0xd78 <main+0x160>
     d76:	10 e0       	ldi	r17, 0x00	; 0
     d78:	11 23       	and	r17, r17
     d7a:	61 f1       	breq	.+88     	; 0xdd4 <main+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7c:	6b 81       	ldd	r22, Y+3	; 0x03
     d7e:	7c 81       	ldd	r23, Y+4	; 0x04
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e2       	ldi	r20, 0x20	; 32
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	9c 87       	std	Y+12, r25	; 0x0c
     da2:	8b 87       	std	Y+11, r24	; 0x0b
     da4:	12 c0       	rjmp	.+36     	; 0xdca <main+0x1b2>
     da6:	80 e9       	ldi	r24, 0x90	; 144
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	9e 87       	std	Y+14, r25	; 0x0e
     dac:	8d 87       	std	Y+13, r24	; 0x0d
     dae:	8d 85       	ldd	r24, Y+13	; 0x0d
     db0:	9e 85       	ldd	r25, Y+14	; 0x0e
     db2:	8c 01       	movw	r16, r24
     db4:	c8 01       	movw	r24, r16
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <main+0x19e>
     dba:	8c 01       	movw	r16, r24
     dbc:	1e 87       	std	Y+14, r17	; 0x0e
     dbe:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc0:	8b 85       	ldd	r24, Y+11	; 0x0b
     dc2:	9c 85       	ldd	r25, Y+12	; 0x0c
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	9c 87       	std	Y+12, r25	; 0x0c
     dc8:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dca:	8b 85       	ldd	r24, Y+11	; 0x0b
     dcc:	9c 85       	ldd	r25, Y+12	; 0x0c
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	51 f7       	brne	.-44     	; 0xda6 <main+0x18e>
     dd2:	17 c0       	rjmp	.+46     	; 0xe02 <main+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd4:	6f 81       	ldd	r22, Y+7	; 0x07
     dd6:	78 85       	ldd	r23, Y+8	; 0x08
     dd8:	89 85       	ldd	r24, Y+9	; 0x09
     dda:	9a 85       	ldd	r25, Y+10	; 0x0a
     ddc:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	9c 87       	std	Y+12, r25	; 0x0c
     de6:	8b 87       	std	Y+11, r24	; 0x0b
     de8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dea:	9c 85       	ldd	r25, Y+12	; 0x0c
     dec:	98 8b       	std	Y+16, r25	; 0x10
     dee:	8f 87       	std	Y+15, r24	; 0x0f
     df0:	8f 85       	ldd	r24, Y+15	; 0x0f
     df2:	98 89       	ldd	r25, Y+16	; 0x10
     df4:	8c 01       	movw	r16, r24
     df6:	f8 01       	movw	r30, r16
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <main+0x1e0>
     dfc:	8f 01       	movw	r16, r30
     dfe:	18 8b       	std	Y+16, r17	; 0x10
     e00:	0f 87       	std	Y+15, r16	; 0x0f

    _delay_ms(75);

    LCD_GoTo(0,1);
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>
    LCD_WriteText("3 ");
     e0a:	89 e8       	ldi	r24, 0x89	; 137
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a6 e9       	ldi	r26, 0x96	; 150
     e18:	b2 e4       	ldi	r27, 0x42	; 66
     e1a:	89 8b       	std	Y+17, r24	; 0x11
     e1c:	9a 8b       	std	Y+18, r25	; 0x12
     e1e:	ab 8b       	std	Y+19, r26	; 0x13
     e20:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     e22:	69 89       	ldd	r22, Y+17	; 0x11
     e24:	7a 89       	ldd	r23, Y+18	; 0x12
     e26:	8b 89       	ldd	r24, Y+19	; 0x13
     e28:	9c 89       	ldd	r25, Y+20	; 0x14
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	4a e7       	ldi	r20, 0x7A	; 122
     e30:	55 e4       	ldi	r21, 0x45	; 69
     e32:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	8d 8b       	std	Y+21, r24	; 0x15
     e3c:	9e 8b       	std	Y+22, r25	; 0x16
     e3e:	af 8b       	std	Y+23, r26	; 0x17
     e40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e42:	11 e0       	ldi	r17, 0x01	; 1
     e44:	6d 89       	ldd	r22, Y+21	; 0x15
     e46:	7e 89       	ldd	r23, Y+22	; 0x16
     e48:	8f 89       	ldd	r24, Y+23	; 0x17
     e4a:	98 8d       	ldd	r25, Y+24	; 0x18
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e8       	ldi	r20, 0x80	; 128
     e52:	5f e3       	ldi	r21, 0x3F	; 63
     e54:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
     e58:	88 23       	and	r24, r24
     e5a:	0c f0       	brlt	.+2      	; 0xe5e <main+0x246>
     e5c:	10 e0       	ldi	r17, 0x00	; 0
     e5e:	11 23       	and	r17, r17
     e60:	29 f0       	breq	.+10     	; 0xe6c <main+0x254>
		__ticks = 1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9a 8f       	std	Y+26, r25	; 0x1a
     e68:	89 8f       	std	Y+25, r24	; 0x19
     e6a:	46 c0       	rjmp	.+140    	; 0xef8 <main+0x2e0>
	else if (__tmp > 65535)
     e6c:	11 e0       	ldi	r17, 0x01	; 1
     e6e:	6d 89       	ldd	r22, Y+21	; 0x15
     e70:	7e 89       	ldd	r23, Y+22	; 0x16
     e72:	8f 89       	ldd	r24, Y+23	; 0x17
     e74:	98 8d       	ldd	r25, Y+24	; 0x18
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	3f ef       	ldi	r19, 0xFF	; 255
     e7a:	4f e7       	ldi	r20, 0x7F	; 127
     e7c:	57 e4       	ldi	r21, 0x47	; 71
     e7e:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
     e82:	18 16       	cp	r1, r24
     e84:	0c f0       	brlt	.+2      	; 0xe88 <main+0x270>
     e86:	10 e0       	ldi	r17, 0x00	; 0
     e88:	11 23       	and	r17, r17
     e8a:	61 f1       	breq	.+88     	; 0xee4 <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8c:	69 89       	ldd	r22, Y+17	; 0x11
     e8e:	7a 89       	ldd	r23, Y+18	; 0x12
     e90:	8b 89       	ldd	r24, Y+19	; 0x13
     e92:	9c 89       	ldd	r25, Y+20	; 0x14
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e2       	ldi	r20, 0x20	; 32
     e9a:	51 e4       	ldi	r21, 0x41	; 65
     e9c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	bc 01       	movw	r22, r24
     ea6:	cd 01       	movw	r24, r26
     ea8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	9a 8f       	std	Y+26, r25	; 0x1a
     eb2:	89 8f       	std	Y+25, r24	; 0x19
     eb4:	12 c0       	rjmp	.+36     	; 0xeda <main+0x2c2>
     eb6:	80 e9       	ldi	r24, 0x90	; 144
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	9c 8f       	std	Y+28, r25	; 0x1c
     ebc:	8b 8f       	std	Y+27, r24	; 0x1b
     ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ec2:	8c 01       	movw	r16, r24
     ec4:	c8 01       	movw	r24, r16
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <main+0x2ae>
     eca:	8c 01       	movw	r16, r24
     ecc:	1c 8f       	std	Y+28, r17	; 0x1c
     ece:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed0:	89 8d       	ldd	r24, Y+25	; 0x19
     ed2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	9a 8f       	std	Y+26, r25	; 0x1a
     ed8:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eda:	89 8d       	ldd	r24, Y+25	; 0x19
     edc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	51 f7       	brne	.-44     	; 0xeb6 <main+0x29e>
     ee2:	17 c0       	rjmp	.+46     	; 0xf12 <main+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee4:	6d 89       	ldd	r22, Y+21	; 0x15
     ee6:	7e 89       	ldd	r23, Y+22	; 0x16
     ee8:	8f 89       	ldd	r24, Y+23	; 0x17
     eea:	98 8d       	ldd	r25, Y+24	; 0x18
     eec:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	9a 8f       	std	Y+26, r25	; 0x1a
     ef6:	89 8f       	std	Y+25, r24	; 0x19
     ef8:	89 8d       	ldd	r24, Y+25	; 0x19
     efa:	9a 8d       	ldd	r25, Y+26	; 0x1a
     efc:	9e 8f       	std	Y+30, r25	; 0x1e
     efe:	8d 8f       	std	Y+29, r24	; 0x1d
     f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f02:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f04:	8c 01       	movw	r16, r24
     f06:	f8 01       	movw	r30, r16
     f08:	31 97       	sbiw	r30, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <main+0x2f0>
     f0c:	8f 01       	movw	r16, r30
     f0e:	1e 8f       	std	Y+30, r17	; 0x1e
     f10:	0d 8f       	std	Y+29, r16	; 0x1d

    _delay_ms(75);
    LCD_WriteText("2 ");
     f12:	8c e8       	ldi	r24, 0x8C	; 140
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a6 e9       	ldi	r26, 0x96	; 150
     f20:	b2 e4       	ldi	r27, 0x42	; 66
     f22:	8f 8f       	std	Y+31, r24	; 0x1f
     f24:	98 a3       	std	Y+32, r25	; 0x20
     f26:	a9 a3       	std	Y+33, r26	; 0x21
     f28:	ba a3       	std	Y+34, r27	; 0x22
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     f2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     f2c:	78 a1       	ldd	r23, Y+32	; 0x20
     f2e:	89 a1       	ldd	r24, Y+33	; 0x21
     f30:	9a a1       	ldd	r25, Y+34	; 0x22
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	4a e7       	ldi	r20, 0x7A	; 122
     f38:	55 e4       	ldi	r21, 0x45	; 69
     f3a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	8b a3       	std	Y+35, r24	; 0x23
     f44:	9c a3       	std	Y+36, r25	; 0x24
     f46:	ad a3       	std	Y+37, r26	; 0x25
     f48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f4a:	11 e0       	ldi	r17, 0x01	; 1
     f4c:	6b a1       	ldd	r22, Y+35	; 0x23
     f4e:	7c a1       	ldd	r23, Y+36	; 0x24
     f50:	8d a1       	ldd	r24, Y+37	; 0x25
     f52:	9e a1       	ldd	r25, Y+38	; 0x26
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
     f60:	88 23       	and	r24, r24
     f62:	0c f0       	brlt	.+2      	; 0xf66 <main+0x34e>
     f64:	10 e0       	ldi	r17, 0x00	; 0
     f66:	11 23       	and	r17, r17
     f68:	29 f0       	breq	.+10     	; 0xf74 <main+0x35c>
		__ticks = 1;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	98 a7       	std	Y+40, r25	; 0x28
     f70:	8f a3       	std	Y+39, r24	; 0x27
     f72:	46 c0       	rjmp	.+140    	; 0x1000 <main+0x3e8>
	else if (__tmp > 65535)
     f74:	11 e0       	ldi	r17, 0x01	; 1
     f76:	6b a1       	ldd	r22, Y+35	; 0x23
     f78:	7c a1       	ldd	r23, Y+36	; 0x24
     f7a:	8d a1       	ldd	r24, Y+37	; 0x25
     f7c:	9e a1       	ldd	r25, Y+38	; 0x26
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	4f e7       	ldi	r20, 0x7F	; 127
     f84:	57 e4       	ldi	r21, 0x47	; 71
     f86:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
     f8a:	18 16       	cp	r1, r24
     f8c:	0c f0       	brlt	.+2      	; 0xf90 <main+0x378>
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	11 23       	and	r17, r17
     f92:	61 f1       	breq	.+88     	; 0xfec <main+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f94:	6f 8d       	ldd	r22, Y+31	; 0x1f
     f96:	78 a1       	ldd	r23, Y+32	; 0x20
     f98:	89 a1       	ldd	r24, Y+33	; 0x21
     f9a:	9a a1       	ldd	r25, Y+34	; 0x22
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e2       	ldi	r20, 0x20	; 32
     fa2:	51 e4       	ldi	r21, 0x41	; 65
     fa4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	98 a7       	std	Y+40, r25	; 0x28
     fba:	8f a3       	std	Y+39, r24	; 0x27
     fbc:	12 c0       	rjmp	.+36     	; 0xfe2 <main+0x3ca>
     fbe:	80 e9       	ldi	r24, 0x90	; 144
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	9a a7       	std	Y+42, r25	; 0x2a
     fc4:	89 a7       	std	Y+41, r24	; 0x29
     fc6:	89 a5       	ldd	r24, Y+41	; 0x29
     fc8:	9a a5       	ldd	r25, Y+42	; 0x2a
     fca:	8c 01       	movw	r16, r24
     fcc:	c8 01       	movw	r24, r16
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <main+0x3b6>
     fd2:	8c 01       	movw	r16, r24
     fd4:	1a a7       	std	Y+42, r17	; 0x2a
     fd6:	09 a7       	std	Y+41, r16	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd8:	8f a1       	ldd	r24, Y+39	; 0x27
     fda:	98 a5       	ldd	r25, Y+40	; 0x28
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	98 a7       	std	Y+40, r25	; 0x28
     fe0:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe2:	8f a1       	ldd	r24, Y+39	; 0x27
     fe4:	98 a5       	ldd	r25, Y+40	; 0x28
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	51 f7       	brne	.-44     	; 0xfbe <main+0x3a6>
     fea:	17 c0       	rjmp	.+46     	; 0x101a <main+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fec:	6b a1       	ldd	r22, Y+35	; 0x23
     fee:	7c a1       	ldd	r23, Y+36	; 0x24
     ff0:	8d a1       	ldd	r24, Y+37	; 0x25
     ff2:	9e a1       	ldd	r25, Y+38	; 0x26
     ff4:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	98 a7       	std	Y+40, r25	; 0x28
     ffe:	8f a3       	std	Y+39, r24	; 0x27
    1000:	8f a1       	ldd	r24, Y+39	; 0x27
    1002:	98 a5       	ldd	r25, Y+40	; 0x28
    1004:	9c a7       	std	Y+44, r25	; 0x2c
    1006:	8b a7       	std	Y+43, r24	; 0x2b
    1008:	8b a5       	ldd	r24, Y+43	; 0x2b
    100a:	9c a5       	ldd	r25, Y+44	; 0x2c
    100c:	8c 01       	movw	r16, r24
    100e:	f8 01       	movw	r30, r16
    1010:	31 97       	sbiw	r30, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <main+0x3f8>
    1014:	8f 01       	movw	r16, r30
    1016:	1c a7       	std	Y+44, r17	; 0x2c
    1018:	0b a7       	std	Y+43, r16	; 0x2b

    _delay_ms(75);
    LCD_WriteText("1 ");
    101a:	8f e8       	ldi	r24, 0x8F	; 143
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	a6 e9       	ldi	r26, 0x96	; 150
    1028:	b2 e4       	ldi	r27, 0x42	; 66
    102a:	8d a7       	std	Y+45, r24	; 0x2d
    102c:	9e a7       	std	Y+46, r25	; 0x2e
    102e:	af a7       	std	Y+47, r26	; 0x2f
    1030:	b8 ab       	std	Y+48, r27	; 0x30
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1032:	6d a5       	ldd	r22, Y+45	; 0x2d
    1034:	7e a5       	ldd	r23, Y+46	; 0x2e
    1036:	8f a5       	ldd	r24, Y+47	; 0x2f
    1038:	98 a9       	ldd	r25, Y+48	; 0x30
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	4a e7       	ldi	r20, 0x7A	; 122
    1040:	55 e4       	ldi	r21, 0x45	; 69
    1042:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	89 ab       	std	Y+49, r24	; 0x31
    104c:	9a ab       	std	Y+50, r25	; 0x32
    104e:	ab ab       	std	Y+51, r26	; 0x33
    1050:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1052:	11 e0       	ldi	r17, 0x01	; 1
    1054:	69 a9       	ldd	r22, Y+49	; 0x31
    1056:	7a a9       	ldd	r23, Y+50	; 0x32
    1058:	8b a9       	ldd	r24, Y+51	; 0x33
    105a:	9c a9       	ldd	r25, Y+52	; 0x34
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e8       	ldi	r20, 0x80	; 128
    1062:	5f e3       	ldi	r21, 0x3F	; 63
    1064:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
    1068:	88 23       	and	r24, r24
    106a:	0c f0       	brlt	.+2      	; 0x106e <main+0x456>
    106c:	10 e0       	ldi	r17, 0x00	; 0
    106e:	11 23       	and	r17, r17
    1070:	29 f0       	breq	.+10     	; 0x107c <main+0x464>
		__ticks = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9e ab       	std	Y+54, r25	; 0x36
    1078:	8d ab       	std	Y+53, r24	; 0x35
    107a:	46 c0       	rjmp	.+140    	; 0x1108 <main+0x4f0>
	else if (__tmp > 65535)
    107c:	11 e0       	ldi	r17, 0x01	; 1
    107e:	69 a9       	ldd	r22, Y+49	; 0x31
    1080:	7a a9       	ldd	r23, Y+50	; 0x32
    1082:	8b a9       	ldd	r24, Y+51	; 0x33
    1084:	9c a9       	ldd	r25, Y+52	; 0x34
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	3f ef       	ldi	r19, 0xFF	; 255
    108a:	4f e7       	ldi	r20, 0x7F	; 127
    108c:	57 e4       	ldi	r21, 0x47	; 71
    108e:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
    1092:	18 16       	cp	r1, r24
    1094:	0c f0       	brlt	.+2      	; 0x1098 <main+0x480>
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	11 23       	and	r17, r17
    109a:	61 f1       	breq	.+88     	; 0x10f4 <main+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109c:	6d a5       	ldd	r22, Y+45	; 0x2d
    109e:	7e a5       	ldd	r23, Y+46	; 0x2e
    10a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a2:	98 a9       	ldd	r25, Y+48	; 0x30
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e2       	ldi	r20, 0x20	; 32
    10aa:	51 e4       	ldi	r21, 0x41	; 65
    10ac:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	bc 01       	movw	r22, r24
    10b6:	cd 01       	movw	r24, r26
    10b8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	9e ab       	std	Y+54, r25	; 0x36
    10c2:	8d ab       	std	Y+53, r24	; 0x35
    10c4:	12 c0       	rjmp	.+36     	; 0x10ea <main+0x4d2>
    10c6:	80 e9       	ldi	r24, 0x90	; 144
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	98 af       	std	Y+56, r25	; 0x38
    10cc:	8f ab       	std	Y+55, r24	; 0x37
    10ce:	8f a9       	ldd	r24, Y+55	; 0x37
    10d0:	98 ad       	ldd	r25, Y+56	; 0x38
    10d2:	8c 01       	movw	r16, r24
    10d4:	c8 01       	movw	r24, r16
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <main+0x4be>
    10da:	8c 01       	movw	r16, r24
    10dc:	18 af       	std	Y+56, r17	; 0x38
    10de:	0f ab       	std	Y+55, r16	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e0:	8d a9       	ldd	r24, Y+53	; 0x35
    10e2:	9e a9       	ldd	r25, Y+54	; 0x36
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	9e ab       	std	Y+54, r25	; 0x36
    10e8:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ea:	8d a9       	ldd	r24, Y+53	; 0x35
    10ec:	9e a9       	ldd	r25, Y+54	; 0x36
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	51 f7       	brne	.-44     	; 0x10c6 <main+0x4ae>
    10f2:	17 c0       	rjmp	.+46     	; 0x1122 <main+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f4:	69 a9       	ldd	r22, Y+49	; 0x31
    10f6:	7a a9       	ldd	r23, Y+50	; 0x32
    10f8:	8b a9       	ldd	r24, Y+51	; 0x33
    10fa:	9c a9       	ldd	r25, Y+52	; 0x34
    10fc:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	9e ab       	std	Y+54, r25	; 0x36
    1106:	8d ab       	std	Y+53, r24	; 0x35
    1108:	8d a9       	ldd	r24, Y+53	; 0x35
    110a:	9e a9       	ldd	r25, Y+54	; 0x36
    110c:	9a af       	std	Y+58, r25	; 0x3a
    110e:	89 af       	std	Y+57, r24	; 0x39
    1110:	89 ad       	ldd	r24, Y+57	; 0x39
    1112:	9a ad       	ldd	r25, Y+58	; 0x3a
    1114:	8c 01       	movw	r16, r24
    1116:	f8 01       	movw	r30, r16
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <main+0x500>
    111c:	8f 01       	movw	r16, r30
    111e:	1a af       	std	Y+58, r17	; 0x3a
    1120:	09 af       	std	Y+57, r16	; 0x39

    _delay_ms(75);
    LCD_WriteText("Teraz ");
    1122:	82 e9       	ldi	r24, 0x92	; 146
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a6 e9       	ldi	r26, 0x96	; 150
    1130:	b2 e4       	ldi	r27, 0x42	; 66
    1132:	8b af       	std	Y+59, r24	; 0x3b
    1134:	9c af       	std	Y+60, r25	; 0x3c
    1136:	ad af       	std	Y+61, r26	; 0x3d
    1138:	be af       	std	Y+62, r27	; 0x3e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    113a:	8e 01       	movw	r16, r28
    113c:	01 5c       	subi	r16, 0xC1	; 193
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	6b ad       	ldd	r22, Y+59	; 0x3b
    1142:	7c ad       	ldd	r23, Y+60	; 0x3c
    1144:	8d ad       	ldd	r24, Y+61	; 0x3d
    1146:	9e ad       	ldd	r25, Y+62	; 0x3e
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	4a e7       	ldi	r20, 0x7A	; 122
    114e:	55 e4       	ldi	r21, 0x45	; 69
    1150:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	f8 01       	movw	r30, r16
    115a:	80 83       	st	Z, r24
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	a2 83       	std	Z+2, r26	; 0x02
    1160:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1162:	ce 01       	movw	r24, r28
    1164:	cf 96       	adiw	r24, 0x3f	; 63
    1166:	11 e0       	ldi	r17, 0x01	; 1
    1168:	fc 01       	movw	r30, r24
    116a:	60 81       	ld	r22, Z
    116c:	71 81       	ldd	r23, Z+1	; 0x01
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e8       	ldi	r20, 0x80	; 128
    1178:	5f e3       	ldi	r21, 0x3F	; 63
    117a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
    117e:	88 23       	and	r24, r24
    1180:	0c f0       	brlt	.+2      	; 0x1184 <main+0x56c>
    1182:	10 e0       	ldi	r17, 0x00	; 0
    1184:	11 23       	and	r17, r17
    1186:	49 f0       	breq	.+18     	; 0x119a <main+0x582>
		__ticks = 1;
    1188:	ce 01       	movw	r24, r28
    118a:	8d 5b       	subi	r24, 0xBD	; 189
    118c:	9f 4f       	sbci	r25, 0xFF	; 255
    118e:	21 e0       	ldi	r18, 0x01	; 1
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	fc 01       	movw	r30, r24
    1194:	31 83       	std	Z+1, r19	; 0x01
    1196:	20 83       	st	Z, r18
    1198:	6e c0       	rjmp	.+220    	; 0x1276 <main+0x65e>
	else if (__tmp > 65535)
    119a:	ce 01       	movw	r24, r28
    119c:	cf 96       	adiw	r24, 0x3f	; 63
    119e:	11 e0       	ldi	r17, 0x01	; 1
    11a0:	fc 01       	movw	r30, r24
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	3f ef       	ldi	r19, 0xFF	; 255
    11ae:	4f e7       	ldi	r20, 0x7F	; 127
    11b0:	57 e4       	ldi	r21, 0x47	; 71
    11b2:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
    11b6:	18 16       	cp	r1, r24
    11b8:	0c f0       	brlt	.+2      	; 0x11bc <main+0x5a4>
    11ba:	10 e0       	ldi	r17, 0x00	; 0
    11bc:	11 23       	and	r17, r17
    11be:	09 f4       	brne	.+2      	; 0x11c2 <main+0x5aa>
    11c0:	49 c0       	rjmp	.+146    	; 0x1254 <main+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c2:	6b ad       	ldd	r22, Y+59	; 0x3b
    11c4:	7c ad       	ldd	r23, Y+60	; 0x3c
    11c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    11c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e2       	ldi	r20, 0x20	; 32
    11d0:	51 e4       	ldi	r21, 0x41	; 65
    11d2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	8e 01       	movw	r16, r28
    11dc:	0d 5b       	subi	r16, 0xBD	; 189
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	f8 01       	movw	r30, r16
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	80 83       	st	Z, r24
    11f2:	27 c0       	rjmp	.+78     	; 0x1242 <main+0x62a>
    11f4:	ce 01       	movw	r24, r28
    11f6:	8b 5b       	subi	r24, 0xBB	; 187
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	20 e9       	ldi	r18, 0x90	; 144
    11fc:	31 e0       	ldi	r19, 0x01	; 1
    11fe:	fc 01       	movw	r30, r24
    1200:	31 83       	std	Z+1, r19	; 0x01
    1202:	20 83       	st	Z, r18
    1204:	ce 01       	movw	r24, r28
    1206:	8b 5b       	subi	r24, 0xBB	; 187
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	fc 01       	movw	r30, r24
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	8c 01       	movw	r16, r24
    1212:	c8 01       	movw	r24, r16
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <main+0x5fc>
    1218:	8c 01       	movw	r16, r24
    121a:	ce 01       	movw	r24, r28
    121c:	8b 5b       	subi	r24, 0xBB	; 187
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	fc 01       	movw	r30, r24
    1222:	11 83       	std	Z+1, r17	; 0x01
    1224:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1226:	ce 01       	movw	r24, r28
    1228:	8d 5b       	subi	r24, 0xBD	; 189
    122a:	9f 4f       	sbci	r25, 0xFF	; 255
    122c:	9e 01       	movw	r18, r28
    122e:	2d 5b       	subi	r18, 0xBD	; 189
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	f9 01       	movw	r30, r18
    1234:	20 81       	ld	r18, Z
    1236:	31 81       	ldd	r19, Z+1	; 0x01
    1238:	21 50       	subi	r18, 0x01	; 1
    123a:	30 40       	sbci	r19, 0x00	; 0
    123c:	fc 01       	movw	r30, r24
    123e:	31 83       	std	Z+1, r19	; 0x01
    1240:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1242:	ce 01       	movw	r24, r28
    1244:	8d 5b       	subi	r24, 0xBD	; 189
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	fc 01       	movw	r30, r24
    124a:	80 81       	ld	r24, Z
    124c:	91 81       	ldd	r25, Z+1	; 0x01
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	89 f6       	brne	.-94     	; 0x11f4 <main+0x5dc>
    1252:	2e c0       	rjmp	.+92     	; 0x12b0 <main+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	8e 01       	movw	r16, r28
    1256:	0d 5b       	subi	r16, 0xBD	; 189
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	ce 01       	movw	r24, r28
    125c:	cf 96       	adiw	r24, 0x3f	; 63
    125e:	fc 01       	movw	r30, r24
    1260:	60 81       	ld	r22, Z
    1262:	71 81       	ldd	r23, Z+1	; 0x01
    1264:	82 81       	ldd	r24, Z+2	; 0x02
    1266:	93 81       	ldd	r25, Z+3	; 0x03
    1268:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	f8 01       	movw	r30, r16
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	80 83       	st	Z, r24
    1276:	ce 01       	movw	r24, r28
    1278:	89 5b       	subi	r24, 0xB9	; 185
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	9e 01       	movw	r18, r28
    127e:	2d 5b       	subi	r18, 0xBD	; 189
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	f9 01       	movw	r30, r18
    1284:	20 81       	ld	r18, Z
    1286:	31 81       	ldd	r19, Z+1	; 0x01
    1288:	fc 01       	movw	r30, r24
    128a:	31 83       	std	Z+1, r19	; 0x01
    128c:	20 83       	st	Z, r18
    128e:	ce 01       	movw	r24, r28
    1290:	89 5b       	subi	r24, 0xB9	; 185
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	fc 01       	movw	r30, r24
    1296:	80 81       	ld	r24, Z
    1298:	91 81       	ldd	r25, Z+1	; 0x01
    129a:	8c 01       	movw	r16, r24
    129c:	c8 01       	movw	r24, r16
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <main+0x686>
    12a2:	8c 01       	movw	r16, r24
    12a4:	ce 01       	movw	r24, r28
    12a6:	89 5b       	subi	r24, 0xB9	; 185
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	fc 01       	movw	r30, r24
    12ac:	11 83       	std	Z+1, r17	; 0x01
    12ae:	00 83       	st	Z, r16

    _delay_ms(75);

    LCD_Clear();
    12b0:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
    LCD_GoTo(0,0);
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>
    12bc:	9e 01       	movw	r18, r28
    12be:	27 5b       	subi	r18, 0xB7	; 183
    12c0:	3f 4f       	sbci	r19, 0xFF	; 255
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a0 e2       	ldi	r26, 0x20	; 32
    12c8:	b1 e4       	ldi	r27, 0x41	; 65
    12ca:	f9 01       	movw	r30, r18
    12cc:	80 83       	st	Z, r24
    12ce:	91 83       	std	Z+1, r25	; 0x01
    12d0:	a2 83       	std	Z+2, r26	; 0x02
    12d2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    12d4:	8e 01       	movw	r16, r28
    12d6:	03 5b       	subi	r16, 0xB3	; 179
    12d8:	1f 4f       	sbci	r17, 0xFF	; 255
    12da:	ce 01       	movw	r24, r28
    12dc:	87 5b       	subi	r24, 0xB7	; 183
    12de:	9f 4f       	sbci	r25, 0xFF	; 255
    12e0:	fc 01       	movw	r30, r24
    12e2:	60 81       	ld	r22, Z
    12e4:	71 81       	ldd	r23, Z+1	; 0x01
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	93 81       	ldd	r25, Z+3	; 0x03
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	4a e7       	ldi	r20, 0x7A	; 122
    12f0:	55 e4       	ldi	r21, 0x45	; 69
    12f2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	f8 01       	movw	r30, r16
    12fc:	80 83       	st	Z, r24
    12fe:	91 83       	std	Z+1, r25	; 0x01
    1300:	a2 83       	std	Z+2, r26	; 0x02
    1302:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1304:	ce 01       	movw	r24, r28
    1306:	83 5b       	subi	r24, 0xB3	; 179
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	11 e0       	ldi	r17, 0x01	; 1
    130c:	fc 01       	movw	r30, r24
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e8       	ldi	r20, 0x80	; 128
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
    1322:	88 23       	and	r24, r24
    1324:	0c f0       	brlt	.+2      	; 0x1328 <main+0x710>
    1326:	10 e0       	ldi	r17, 0x00	; 0
    1328:	11 23       	and	r17, r17
    132a:	49 f0       	breq	.+18     	; 0x133e <main+0x726>
		__ticks = 1;
    132c:	ce 01       	movw	r24, r28
    132e:	8f 5a       	subi	r24, 0xAF	; 175
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	21 e0       	ldi	r18, 0x01	; 1
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	fc 01       	movw	r30, r24
    1338:	31 83       	std	Z+1, r19	; 0x01
    133a:	20 83       	st	Z, r18
    133c:	74 c0       	rjmp	.+232    	; 0x1426 <main+0x80e>
	else if (__tmp > 65535)
    133e:	ce 01       	movw	r24, r28
    1340:	83 5b       	subi	r24, 0xB3	; 179
    1342:	9f 4f       	sbci	r25, 0xFF	; 255
    1344:	11 e0       	ldi	r17, 0x01	; 1
    1346:	fc 01       	movw	r30, r24
    1348:	60 81       	ld	r22, Z
    134a:	71 81       	ldd	r23, Z+1	; 0x01
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
    135c:	18 16       	cp	r1, r24
    135e:	0c f0       	brlt	.+2      	; 0x1362 <main+0x74a>
    1360:	10 e0       	ldi	r17, 0x00	; 0
    1362:	11 23       	and	r17, r17
    1364:	09 f4       	brne	.+2      	; 0x1368 <main+0x750>
    1366:	4d c0       	rjmp	.+154    	; 0x1402 <main+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1368:	ce 01       	movw	r24, r28
    136a:	87 5b       	subi	r24, 0xB7	; 183
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	fc 01       	movw	r30, r24
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e2       	ldi	r20, 0x20	; 32
    137e:	51 e4       	ldi	r21, 0x41	; 65
    1380:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	8e 01       	movw	r16, r28
    138a:	0f 5a       	subi	r16, 0xAF	; 175
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	f8 01       	movw	r30, r16
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	80 83       	st	Z, r24
    13a0:	27 c0       	rjmp	.+78     	; 0x13f0 <main+0x7d8>
    13a2:	ce 01       	movw	r24, r28
    13a4:	8d 5a       	subi	r24, 0xAD	; 173
    13a6:	9f 4f       	sbci	r25, 0xFF	; 255
    13a8:	20 e9       	ldi	r18, 0x90	; 144
    13aa:	31 e0       	ldi	r19, 0x01	; 1
    13ac:	fc 01       	movw	r30, r24
    13ae:	31 83       	std	Z+1, r19	; 0x01
    13b0:	20 83       	st	Z, r18
    13b2:	ce 01       	movw	r24, r28
    13b4:	8d 5a       	subi	r24, 0xAD	; 173
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	fc 01       	movw	r30, r24
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	8c 01       	movw	r16, r24
    13c0:	c8 01       	movw	r24, r16
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <main+0x7aa>
    13c6:	8c 01       	movw	r16, r24
    13c8:	ce 01       	movw	r24, r28
    13ca:	8d 5a       	subi	r24, 0xAD	; 173
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	fc 01       	movw	r30, r24
    13d0:	11 83       	std	Z+1, r17	; 0x01
    13d2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d4:	ce 01       	movw	r24, r28
    13d6:	8f 5a       	subi	r24, 0xAF	; 175
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	9e 01       	movw	r18, r28
    13dc:	2f 5a       	subi	r18, 0xAF	; 175
    13de:	3f 4f       	sbci	r19, 0xFF	; 255
    13e0:	f9 01       	movw	r30, r18
    13e2:	20 81       	ld	r18, Z
    13e4:	31 81       	ldd	r19, Z+1	; 0x01
    13e6:	21 50       	subi	r18, 0x01	; 1
    13e8:	30 40       	sbci	r19, 0x00	; 0
    13ea:	fc 01       	movw	r30, r24
    13ec:	31 83       	std	Z+1, r19	; 0x01
    13ee:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f0:	ce 01       	movw	r24, r28
    13f2:	8f 5a       	subi	r24, 0xAF	; 175
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	fc 01       	movw	r30, r24
    13f8:	80 81       	ld	r24, Z
    13fa:	91 81       	ldd	r25, Z+1	; 0x01
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	89 f6       	brne	.-94     	; 0x13a2 <main+0x78a>
    1400:	2f c0       	rjmp	.+94     	; 0x1460 <main+0x848>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1402:	8e 01       	movw	r16, r28
    1404:	0f 5a       	subi	r16, 0xAF	; 175
    1406:	1f 4f       	sbci	r17, 0xFF	; 255
    1408:	ce 01       	movw	r24, r28
    140a:	83 5b       	subi	r24, 0xB3	; 179
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	fc 01       	movw	r30, r24
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	f8 01       	movw	r30, r16
    1422:	91 83       	std	Z+1, r25	; 0x01
    1424:	80 83       	st	Z, r24
    1426:	ce 01       	movw	r24, r28
    1428:	8b 5a       	subi	r24, 0xAB	; 171
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	9e 01       	movw	r18, r28
    142e:	2f 5a       	subi	r18, 0xAF	; 175
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	f9 01       	movw	r30, r18
    1434:	20 81       	ld	r18, Z
    1436:	31 81       	ldd	r19, Z+1	; 0x01
    1438:	fc 01       	movw	r30, r24
    143a:	31 83       	std	Z+1, r19	; 0x01
    143c:	20 83       	st	Z, r18
    143e:	ce 01       	movw	r24, r28
    1440:	8b 5a       	subi	r24, 0xAB	; 171
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	fc 01       	movw	r30, r24
    1446:	80 81       	ld	r24, Z
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	8c 01       	movw	r16, r24
    144c:	c8 01       	movw	r24, r16
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <main+0x836>
    1452:	8c 01       	movw	r16, r24
    1454:	ce 01       	movw	r24, r28
    1456:	8b 5a       	subi	r24, 0xAB	; 171
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	fc 01       	movw	r30, r24
    145c:	11 83       	std	Z+1, r17	; 0x01
    145e:	00 83       	st	Z, r16
    _delay_ms(10);




    LCD_Clear();
    1460:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>

    LCD_GoTo(0,0);
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>
    LCD_WriteText("Imie:");
    146c:	89 e9       	ldi	r24, 0x99	; 153
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
    LCD_GoTo(0,1);
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>

    while(1)
    {

        prompt[0] = alfabet[letter_number];
    147c:	80 91 c2 00 	lds	r24, 0x00C2
    1480:	90 91 c3 00 	lds	r25, 0x00C3
    1484:	80 5a       	subi	r24, 0xA0	; 160
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	fc 01       	movw	r30, r24
    148a:	80 81       	ld	r24, Z
    148c:	80 93 da 00 	sts	0x00DA, r24

        LCD_WriteText(prompt);
    1490:	8a ed       	ldi	r24, 0xDA	; 218
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
        LCD_GoTo(lcd_position_h , 1);
    1498:	80 91 bc 00 	lds	r24, 0x00BC
    149c:	90 91 bd 00 	lds	r25, 0x00BD
    14a0:	61 e0       	ldi	r22, 0x01	; 1
    14a2:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>
    14a6:	9e 01       	movw	r18, r28
    14a8:	29 5a       	subi	r18, 0xA9	; 169
    14aa:	3f 4f       	sbci	r19, 0xFF	; 255
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a0 ef       	ldi	r26, 0xF0	; 240
    14b2:	b1 e4       	ldi	r27, 0x41	; 65
    14b4:	f9 01       	movw	r30, r18
    14b6:	80 83       	st	Z, r24
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	a2 83       	std	Z+2, r26	; 0x02
    14bc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    14be:	8e 01       	movw	r16, r28
    14c0:	05 5a       	subi	r16, 0xA5	; 165
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	ce 01       	movw	r24, r28
    14c6:	89 5a       	subi	r24, 0xA9	; 169
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	fc 01       	movw	r30, r24
    14cc:	60 81       	ld	r22, Z
    14ce:	71 81       	ldd	r23, Z+1	; 0x01
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	93 81       	ldd	r25, Z+3	; 0x03
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	4a e7       	ldi	r20, 0x7A	; 122
    14da:	55 e4       	ldi	r21, 0x45	; 69
    14dc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	f8 01       	movw	r30, r16
    14e6:	80 83       	st	Z, r24
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	a2 83       	std	Z+2, r26	; 0x02
    14ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14ee:	ce 01       	movw	r24, r28
    14f0:	85 5a       	subi	r24, 0xA5	; 165
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	11 e0       	ldi	r17, 0x01	; 1
    14f6:	fc 01       	movw	r30, r24
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e8       	ldi	r20, 0x80	; 128
    1506:	5f e3       	ldi	r21, 0x3F	; 63
    1508:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
    150c:	88 23       	and	r24, r24
    150e:	0c f0       	brlt	.+2      	; 0x1512 <main+0x8fa>
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	11 23       	and	r17, r17
    1514:	49 f0       	breq	.+18     	; 0x1528 <main+0x910>
		__ticks = 1;
    1516:	ce 01       	movw	r24, r28
    1518:	81 5a       	subi	r24, 0xA1	; 161
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	21 e0       	ldi	r18, 0x01	; 1
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	fc 01       	movw	r30, r24
    1522:	31 83       	std	Z+1, r19	; 0x01
    1524:	20 83       	st	Z, r18
    1526:	74 c0       	rjmp	.+232    	; 0x1610 <main+0x9f8>
	else if (__tmp > 65535)
    1528:	ce 01       	movw	r24, r28
    152a:	85 5a       	subi	r24, 0xA5	; 165
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	11 e0       	ldi	r17, 0x01	; 1
    1530:	fc 01       	movw	r30, r24
    1532:	60 81       	ld	r22, Z
    1534:	71 81       	ldd	r23, Z+1	; 0x01
    1536:	82 81       	ldd	r24, Z+2	; 0x02
    1538:	93 81       	ldd	r25, Z+3	; 0x03
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	4f e7       	ldi	r20, 0x7F	; 127
    1540:	57 e4       	ldi	r21, 0x47	; 71
    1542:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
    1546:	18 16       	cp	r1, r24
    1548:	0c f0       	brlt	.+2      	; 0x154c <main+0x934>
    154a:	10 e0       	ldi	r17, 0x00	; 0
    154c:	11 23       	and	r17, r17
    154e:	09 f4       	brne	.+2      	; 0x1552 <main+0x93a>
    1550:	4d c0       	rjmp	.+154    	; 0x15ec <main+0x9d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1552:	ce 01       	movw	r24, r28
    1554:	89 5a       	subi	r24, 0xA9	; 169
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	fc 01       	movw	r30, r24
    155a:	60 81       	ld	r22, Z
    155c:	71 81       	ldd	r23, Z+1	; 0x01
    155e:	82 81       	ldd	r24, Z+2	; 0x02
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e2       	ldi	r20, 0x20	; 32
    1568:	51 e4       	ldi	r21, 0x41	; 65
    156a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8e 01       	movw	r16, r28
    1574:	01 5a       	subi	r16, 0xA1	; 161
    1576:	1f 4f       	sbci	r17, 0xFF	; 255
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	f8 01       	movw	r30, r16
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
    158a:	27 c0       	rjmp	.+78     	; 0x15da <main+0x9c2>
    158c:	ce 01       	movw	r24, r28
    158e:	8f 59       	subi	r24, 0x9F	; 159
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	20 e9       	ldi	r18, 0x90	; 144
    1594:	31 e0       	ldi	r19, 0x01	; 1
    1596:	fc 01       	movw	r30, r24
    1598:	31 83       	std	Z+1, r19	; 0x01
    159a:	20 83       	st	Z, r18
    159c:	ce 01       	movw	r24, r28
    159e:	8f 59       	subi	r24, 0x9F	; 159
    15a0:	9f 4f       	sbci	r25, 0xFF	; 255
    15a2:	fc 01       	movw	r30, r24
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	8c 01       	movw	r16, r24
    15aa:	c8 01       	movw	r24, r16
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <main+0x994>
    15b0:	8c 01       	movw	r16, r24
    15b2:	ce 01       	movw	r24, r28
    15b4:	8f 59       	subi	r24, 0x9F	; 159
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	fc 01       	movw	r30, r24
    15ba:	11 83       	std	Z+1, r17	; 0x01
    15bc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15be:	ce 01       	movw	r24, r28
    15c0:	81 5a       	subi	r24, 0xA1	; 161
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	9e 01       	movw	r18, r28
    15c6:	21 5a       	subi	r18, 0xA1	; 161
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	f9 01       	movw	r30, r18
    15cc:	20 81       	ld	r18, Z
    15ce:	31 81       	ldd	r19, Z+1	; 0x01
    15d0:	21 50       	subi	r18, 0x01	; 1
    15d2:	30 40       	sbci	r19, 0x00	; 0
    15d4:	fc 01       	movw	r30, r24
    15d6:	31 83       	std	Z+1, r19	; 0x01
    15d8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15da:	ce 01       	movw	r24, r28
    15dc:	81 5a       	subi	r24, 0xA1	; 161
    15de:	9f 4f       	sbci	r25, 0xFF	; 255
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	89 f6       	brne	.-94     	; 0x158c <main+0x974>
    15ea:	2f c0       	rjmp	.+94     	; 0x164a <main+0xa32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ec:	8e 01       	movw	r16, r28
    15ee:	01 5a       	subi	r16, 0xA1	; 161
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	ce 01       	movw	r24, r28
    15f4:	85 5a       	subi	r24, 0xA5	; 165
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	fc 01       	movw	r30, r24
    15fa:	60 81       	ld	r22, Z
    15fc:	71 81       	ldd	r23, Z+1	; 0x01
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	f8 01       	movw	r30, r16
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24
    1610:	ce 01       	movw	r24, r28
    1612:	8d 59       	subi	r24, 0x9D	; 157
    1614:	9f 4f       	sbci	r25, 0xFF	; 255
    1616:	9e 01       	movw	r18, r28
    1618:	21 5a       	subi	r18, 0xA1	; 161
    161a:	3f 4f       	sbci	r19, 0xFF	; 255
    161c:	f9 01       	movw	r30, r18
    161e:	20 81       	ld	r18, Z
    1620:	31 81       	ldd	r19, Z+1	; 0x01
    1622:	fc 01       	movw	r30, r24
    1624:	31 83       	std	Z+1, r19	; 0x01
    1626:	20 83       	st	Z, r18
    1628:	ce 01       	movw	r24, r28
    162a:	8d 59       	subi	r24, 0x9D	; 157
    162c:	9f 4f       	sbci	r25, 0xFF	; 255
    162e:	fc 01       	movw	r30, r24
    1630:	80 81       	ld	r24, Z
    1632:	91 81       	ldd	r25, Z+1	; 0x01
    1634:	8c 01       	movw	r16, r24
    1636:	c8 01       	movw	r24, r16
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <main+0xa20>
    163c:	8c 01       	movw	r16, r24
    163e:	ce 01       	movw	r24, r28
    1640:	8d 59       	subi	r24, 0x9D	; 157
    1642:	9f 4f       	sbci	r25, 0xFF	; 255
    1644:	fc 01       	movw	r30, r24
    1646:	11 83       	std	Z+1, r17	; 0x01
    1648:	00 83       	st	Z, r16

        _delay_ms(30);

        LCD_WriteText(" ");
    164a:	8f e9       	ldi	r24, 0x9F	; 159
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
         LCD_GoTo(lcd_position_h , 1);
    1652:	80 91 bc 00 	lds	r24, 0x00BC
    1656:	90 91 bd 00 	lds	r25, 0x00BD
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>
    1660:	9e 01       	movw	r18, r28
    1662:	2b 59       	subi	r18, 0x9B	; 155
    1664:	3f 4f       	sbci	r19, 0xFF	; 255
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a0 ef       	ldi	r26, 0xF0	; 240
    166c:	b1 e4       	ldi	r27, 0x41	; 65
    166e:	f9 01       	movw	r30, r18
    1670:	80 83       	st	Z, r24
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	a2 83       	std	Z+2, r26	; 0x02
    1676:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1678:	8e 01       	movw	r16, r28
    167a:	07 59       	subi	r16, 0x97	; 151
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	ce 01       	movw	r24, r28
    1680:	8b 59       	subi	r24, 0x9B	; 155
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	fc 01       	movw	r30, r24
    1686:	60 81       	ld	r22, Z
    1688:	71 81       	ldd	r23, Z+1	; 0x01
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a e7       	ldi	r20, 0x7A	; 122
    1694:	55 e4       	ldi	r21, 0x45	; 69
    1696:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	f8 01       	movw	r30, r16
    16a0:	80 83       	st	Z, r24
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	a2 83       	std	Z+2, r26	; 0x02
    16a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16a8:	ce 01       	movw	r24, r28
    16aa:	87 59       	subi	r24, 0x97	; 151
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	11 e0       	ldi	r17, 0x01	; 1
    16b0:	fc 01       	movw	r30, r24
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	0c f0       	brlt	.+2      	; 0x16cc <main+0xab4>
    16ca:	10 e0       	ldi	r17, 0x00	; 0
    16cc:	11 23       	and	r17, r17
    16ce:	49 f0       	breq	.+18     	; 0x16e2 <main+0xaca>
		__ticks = 1;
    16d0:	ce 01       	movw	r24, r28
    16d2:	83 59       	subi	r24, 0x93	; 147
    16d4:	9f 4f       	sbci	r25, 0xFF	; 255
    16d6:	21 e0       	ldi	r18, 0x01	; 1
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	fc 01       	movw	r30, r24
    16dc:	31 83       	std	Z+1, r19	; 0x01
    16de:	20 83       	st	Z, r18
    16e0:	74 c0       	rjmp	.+232    	; 0x17ca <main+0xbb2>
	else if (__tmp > 65535)
    16e2:	ce 01       	movw	r24, r28
    16e4:	87 59       	subi	r24, 0x97	; 151
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	11 e0       	ldi	r17, 0x01	; 1
    16ea:	fc 01       	movw	r30, r24
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	3f ef       	ldi	r19, 0xFF	; 255
    16f8:	4f e7       	ldi	r20, 0x7F	; 127
    16fa:	57 e4       	ldi	r21, 0x47	; 71
    16fc:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
    1700:	18 16       	cp	r1, r24
    1702:	0c f0       	brlt	.+2      	; 0x1706 <main+0xaee>
    1704:	10 e0       	ldi	r17, 0x00	; 0
    1706:	11 23       	and	r17, r17
    1708:	09 f4       	brne	.+2      	; 0x170c <main+0xaf4>
    170a:	4d c0       	rjmp	.+154    	; 0x17a6 <main+0xb8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170c:	ce 01       	movw	r24, r28
    170e:	8b 59       	subi	r24, 0x9B	; 155
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	fc 01       	movw	r30, r24
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	51 e4       	ldi	r21, 0x41	; 65
    1724:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	8e 01       	movw	r16, r28
    172e:	03 59       	subi	r16, 0x93	; 147
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	f8 01       	movw	r30, r16
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
    1744:	27 c0       	rjmp	.+78     	; 0x1794 <main+0xb7c>
    1746:	ce 01       	movw	r24, r28
    1748:	81 59       	subi	r24, 0x91	; 145
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	20 e9       	ldi	r18, 0x90	; 144
    174e:	31 e0       	ldi	r19, 0x01	; 1
    1750:	fc 01       	movw	r30, r24
    1752:	31 83       	std	Z+1, r19	; 0x01
    1754:	20 83       	st	Z, r18
    1756:	ce 01       	movw	r24, r28
    1758:	81 59       	subi	r24, 0x91	; 145
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	fc 01       	movw	r30, r24
    175e:	80 81       	ld	r24, Z
    1760:	91 81       	ldd	r25, Z+1	; 0x01
    1762:	8c 01       	movw	r16, r24
    1764:	c8 01       	movw	r24, r16
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <main+0xb4e>
    176a:	8c 01       	movw	r16, r24
    176c:	ce 01       	movw	r24, r28
    176e:	81 59       	subi	r24, 0x91	; 145
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	fc 01       	movw	r30, r24
    1774:	11 83       	std	Z+1, r17	; 0x01
    1776:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1778:	ce 01       	movw	r24, r28
    177a:	83 59       	subi	r24, 0x93	; 147
    177c:	9f 4f       	sbci	r25, 0xFF	; 255
    177e:	9e 01       	movw	r18, r28
    1780:	23 59       	subi	r18, 0x93	; 147
    1782:	3f 4f       	sbci	r19, 0xFF	; 255
    1784:	f9 01       	movw	r30, r18
    1786:	20 81       	ld	r18, Z
    1788:	31 81       	ldd	r19, Z+1	; 0x01
    178a:	21 50       	subi	r18, 0x01	; 1
    178c:	30 40       	sbci	r19, 0x00	; 0
    178e:	fc 01       	movw	r30, r24
    1790:	31 83       	std	Z+1, r19	; 0x01
    1792:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1794:	ce 01       	movw	r24, r28
    1796:	83 59       	subi	r24, 0x93	; 147
    1798:	9f 4f       	sbci	r25, 0xFF	; 255
    179a:	fc 01       	movw	r30, r24
    179c:	80 81       	ld	r24, Z
    179e:	91 81       	ldd	r25, Z+1	; 0x01
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	89 f6       	brne	.-94     	; 0x1746 <main+0xb2e>
        _delay_ms(30);



    };
    17a4:	6b ce       	rjmp	.-810    	; 0x147c <main+0x864>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a6:	8e 01       	movw	r16, r28
    17a8:	03 59       	subi	r16, 0x93	; 147
    17aa:	1f 4f       	sbci	r17, 0xFF	; 255
    17ac:	ce 01       	movw	r24, r28
    17ae:	87 59       	subi	r24, 0x97	; 151
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	fc 01       	movw	r30, r24
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	f8 01       	movw	r30, r16
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	ce 01       	movw	r24, r28
    17cc:	8f 58       	subi	r24, 0x8F	; 143
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	9e 01       	movw	r18, r28
    17d2:	23 59       	subi	r18, 0x93	; 147
    17d4:	3f 4f       	sbci	r19, 0xFF	; 255
    17d6:	f9 01       	movw	r30, r18
    17d8:	20 81       	ld	r18, Z
    17da:	31 81       	ldd	r19, Z+1	; 0x01
    17dc:	fc 01       	movw	r30, r24
    17de:	31 83       	std	Z+1, r19	; 0x01
    17e0:	20 83       	st	Z, r18
    17e2:	ce 01       	movw	r24, r28
    17e4:	8f 58       	subi	r24, 0x8F	; 143
    17e6:	9f 4f       	sbci	r25, 0xFF	; 255
    17e8:	fc 01       	movw	r30, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	91 81       	ldd	r25, Z+1	; 0x01
    17ee:	8c 01       	movw	r16, r24
    17f0:	c8 01       	movw	r24, r16
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <main+0xbda>
    17f6:	8c 01       	movw	r16, r24
    17f8:	ce 01       	movw	r24, r28
    17fa:	8f 58       	subi	r24, 0x8F	; 143
    17fc:	9f 4f       	sbci	r25, 0xFF	; 255
    17fe:	fc 01       	movw	r30, r24
    1800:	11 83       	std	Z+1, r17	; 0x01
    1802:	00 83       	st	Z, r16
    1804:	3b ce       	rjmp	.-906    	; 0x147c <main+0x864>

00001806 <__vector_1>:
    return 0;
}


SIGNAL(SIG_INTERRUPT0)
{
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	2f 93       	push	r18
    1816:	3f 93       	push	r19
    1818:	4f 93       	push	r20
    181a:	5f 93       	push	r21
    181c:	6f 93       	push	r22
    181e:	7f 93       	push	r23
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	af 93       	push	r26
    1826:	bf 93       	push	r27
    1828:	ef 93       	push	r30
    182a:	ff 93       	push	r31
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	aa 97       	sbiw	r28, 0x2a	; 42
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	cd bf       	out	0x3d, r28	; 61

    if (interrupt == 1)
    183a:	80 91 c0 00 	lds	r24, 0x00C0
    183e:	90 91 c1 00 	lds	r25, 0x00C1
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <__vector_1+0x44>
    1848:	25 c2       	rjmp	.+1098   	; 0x1c94 <__vector_1+0x48e>

        return;

    }

    interrupt = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	90 93 c1 00 	sts	0x00C1, r25
    1852:	80 93 c0 00 	sts	0x00C0, r24

    if ((PIND & 0b00010000) == 0)           // nastepna litera
    1856:	80 e3       	ldi	r24, 0x30	; 48
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	fc 01       	movw	r30, r24
    185c:	80 81       	ld	r24, Z
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	80 71       	andi	r24, 0x10	; 16
    1864:	90 70       	andi	r25, 0x00	; 0
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	09 f0       	breq	.+2      	; 0x186c <__vector_1+0x66>
    186a:	91 c0       	rjmp	.+290    	; 0x198e <__vector_1+0x188>
    {


        letter_number++;
    186c:	80 91 c2 00 	lds	r24, 0x00C2
    1870:	90 91 c3 00 	lds	r25, 0x00C3
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	90 93 c3 00 	sts	0x00C3, r25
    187a:	80 93 c2 00 	sts	0x00C2, r24
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a8 ec       	ldi	r26, 0xC8	; 200
    1884:	b1 e4       	ldi	r27, 0x41	; 65
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	ab 83       	std	Y+3, r26	; 0x03
    188c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    188e:	69 81       	ldd	r22, Y+1	; 0x01
    1890:	7a 81       	ldd	r23, Y+2	; 0x02
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	55 e4       	ldi	r21, 0x45	; 69
    189e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	af 83       	std	Y+7, r26	; 0x07
    18ac:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    18ae:	11 e0       	ldi	r17, 0x01	; 1
    18b0:	6d 81       	ldd	r22, Y+5	; 0x05
    18b2:	7e 81       	ldd	r23, Y+6	; 0x06
    18b4:	8f 81       	ldd	r24, Y+7	; 0x07
    18b6:	98 85       	ldd	r25, Y+8	; 0x08
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
    18c4:	88 23       	and	r24, r24
    18c6:	0c f0       	brlt	.+2      	; 0x18ca <__vector_1+0xc4>
    18c8:	10 e0       	ldi	r17, 0x00	; 0
    18ca:	11 23       	and	r17, r17
    18cc:	29 f0       	breq	.+10     	; 0x18d8 <__vector_1+0xd2>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9a 87       	std	Y+10, r25	; 0x0a
    18d4:	89 87       	std	Y+9, r24	; 0x09
    18d6:	46 c0       	rjmp	.+140    	; 0x1964 <__vector_1+0x15e>
	else if (__tmp > 65535)
    18d8:	11 e0       	ldi	r17, 0x01	; 1
    18da:	6d 81       	ldd	r22, Y+5	; 0x05
    18dc:	7e 81       	ldd	r23, Y+6	; 0x06
    18de:	8f 81       	ldd	r24, Y+7	; 0x07
    18e0:	98 85       	ldd	r25, Y+8	; 0x08
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	3f ef       	ldi	r19, 0xFF	; 255
    18e6:	4f e7       	ldi	r20, 0x7F	; 127
    18e8:	57 e4       	ldi	r21, 0x47	; 71
    18ea:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
    18ee:	18 16       	cp	r1, r24
    18f0:	0c f0       	brlt	.+2      	; 0x18f4 <__vector_1+0xee>
    18f2:	10 e0       	ldi	r17, 0x00	; 0
    18f4:	11 23       	and	r17, r17
    18f6:	61 f1       	breq	.+88     	; 0x1950 <__vector_1+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	69 81       	ldd	r22, Y+1	; 0x01
    18fa:	7a 81       	ldd	r23, Y+2	; 0x02
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9a 87       	std	Y+10, r25	; 0x0a
    191e:	89 87       	std	Y+9, r24	; 0x09
    1920:	12 c0       	rjmp	.+36     	; 0x1946 <__vector_1+0x140>
    1922:	80 e9       	ldi	r24, 0x90	; 144
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	9c 87       	std	Y+12, r25	; 0x0c
    1928:	8b 87       	std	Y+11, r24	; 0x0b
    192a:	8b 85       	ldd	r24, Y+11	; 0x0b
    192c:	9c 85       	ldd	r25, Y+12	; 0x0c
    192e:	8c 01       	movw	r16, r24
    1930:	c8 01       	movw	r24, r16
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <__vector_1+0x12c>
    1936:	8c 01       	movw	r16, r24
    1938:	1c 87       	std	Y+12, r17	; 0x0c
    193a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9a 87       	std	Y+10, r25	; 0x0a
    1944:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	51 f7       	brne	.-44     	; 0x1922 <__vector_1+0x11c>
    194e:	17 c0       	rjmp	.+46     	; 0x197e <__vector_1+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6d 81       	ldd	r22, Y+5	; 0x05
    1952:	7e 81       	ldd	r23, Y+6	; 0x06
    1954:	8f 81       	ldd	r24, Y+7	; 0x07
    1956:	98 85       	ldd	r25, Y+8	; 0x08
    1958:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9a 87       	std	Y+10, r25	; 0x0a
    1962:	89 87       	std	Y+9, r24	; 0x09
    1964:	89 85       	ldd	r24, Y+9	; 0x09
    1966:	9a 85       	ldd	r25, Y+10	; 0x0a
    1968:	9e 87       	std	Y+14, r25	; 0x0e
    196a:	8d 87       	std	Y+13, r24	; 0x0d
    196c:	8d 85       	ldd	r24, Y+13	; 0x0d
    196e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1970:	8c 01       	movw	r16, r24
    1972:	f8 01       	movw	r30, r16
    1974:	31 97       	sbiw	r30, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <__vector_1+0x16e>
    1978:	8f 01       	movw	r16, r30
    197a:	1e 87       	std	Y+14, r17	; 0x0e
    197c:	0d 87       	std	Y+13, r16	; 0x0d
        _delay_ms(25);
        check_number();
    197e:	83 e6       	ldi	r24, 0x63	; 99
    1980:	9e e0       	ldi	r25, 0x0E	; 14
    1982:	fc 01       	movw	r30, r24
    1984:	09 95       	icall
        show_letter();
    1986:	84 e8       	ldi	r24, 0x84	; 132
    1988:	9e e0       	ldi	r25, 0x0E	; 14
    198a:	fc 01       	movw	r30, r24
    198c:	09 95       	icall

    }
    if ((PIND & 0b00100000) == 0)           // poprzednia litera
    198e:	80 e3       	ldi	r24, 0x30	; 48
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	fc 01       	movw	r30, r24
    1994:	80 81       	ld	r24, Z
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	80 72       	andi	r24, 0x20	; 32
    199c:	90 70       	andi	r25, 0x00	; 0
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <__vector_1+0x19e>
    19a2:	91 c0       	rjmp	.+290    	; 0x1ac6 <__vector_1+0x2c0>
    {


        letter_number--;
    19a4:	80 91 c2 00 	lds	r24, 0x00C2
    19a8:	90 91 c3 00 	lds	r25, 0x00C3
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	90 93 c3 00 	sts	0x00C3, r25
    19b2:	80 93 c2 00 	sts	0x00C2, r24
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a8 ec       	ldi	r26, 0xC8	; 200
    19bc:	b1 e4       	ldi	r27, 0x41	; 65
    19be:	8f 87       	std	Y+15, r24	; 0x0f
    19c0:	98 8b       	std	Y+16, r25	; 0x10
    19c2:	a9 8b       	std	Y+17, r26	; 0x11
    19c4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    19c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    19c8:	78 89       	ldd	r23, Y+16	; 0x10
    19ca:	89 89       	ldd	r24, Y+17	; 0x11
    19cc:	9a 89       	ldd	r25, Y+18	; 0x12
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	4a e7       	ldi	r20, 0x7A	; 122
    19d4:	55 e4       	ldi	r21, 0x45	; 69
    19d6:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	8b 8b       	std	Y+19, r24	; 0x13
    19e0:	9c 8b       	std	Y+20, r25	; 0x14
    19e2:	ad 8b       	std	Y+21, r26	; 0x15
    19e4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    19e6:	11 e0       	ldi	r17, 0x01	; 1
    19e8:	6b 89       	ldd	r22, Y+19	; 0x13
    19ea:	7c 89       	ldd	r23, Y+20	; 0x14
    19ec:	8d 89       	ldd	r24, Y+21	; 0x15
    19ee:	9e 89       	ldd	r25, Y+22	; 0x16
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	5f e3       	ldi	r21, 0x3F	; 63
    19f8:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
    19fc:	88 23       	and	r24, r24
    19fe:	0c f0       	brlt	.+2      	; 0x1a02 <__vector_1+0x1fc>
    1a00:	10 e0       	ldi	r17, 0x00	; 0
    1a02:	11 23       	and	r17, r17
    1a04:	29 f0       	breq	.+10     	; 0x1a10 <__vector_1+0x20a>
		__ticks = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	98 8f       	std	Y+24, r25	; 0x18
    1a0c:	8f 8b       	std	Y+23, r24	; 0x17
    1a0e:	46 c0       	rjmp	.+140    	; 0x1a9c <__vector_1+0x296>
	else if (__tmp > 65535)
    1a10:	11 e0       	ldi	r17, 0x01	; 1
    1a12:	6b 89       	ldd	r22, Y+19	; 0x13
    1a14:	7c 89       	ldd	r23, Y+20	; 0x14
    1a16:	8d 89       	ldd	r24, Y+21	; 0x15
    1a18:	9e 89       	ldd	r25, Y+22	; 0x16
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	3f ef       	ldi	r19, 0xFF	; 255
    1a1e:	4f e7       	ldi	r20, 0x7F	; 127
    1a20:	57 e4       	ldi	r21, 0x47	; 71
    1a22:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
    1a26:	18 16       	cp	r1, r24
    1a28:	0c f0       	brlt	.+2      	; 0x1a2c <__vector_1+0x226>
    1a2a:	10 e0       	ldi	r17, 0x00	; 0
    1a2c:	11 23       	and	r17, r17
    1a2e:	61 f1       	breq	.+88     	; 0x1a88 <__vector_1+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a30:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a32:	78 89       	ldd	r23, Y+16	; 0x10
    1a34:	89 89       	ldd	r24, Y+17	; 0x11
    1a36:	9a 89       	ldd	r25, Y+18	; 0x12
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e2       	ldi	r20, 0x20	; 32
    1a3e:	51 e4       	ldi	r21, 0x41	; 65
    1a40:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	98 8f       	std	Y+24, r25	; 0x18
    1a56:	8f 8b       	std	Y+23, r24	; 0x17
    1a58:	12 c0       	rjmp	.+36     	; 0x1a7e <__vector_1+0x278>
    1a5a:	80 e9       	ldi	r24, 0x90	; 144
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a60:	89 8f       	std	Y+25, r24	; 0x19
    1a62:	89 8d       	ldd	r24, Y+25	; 0x19
    1a64:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a66:	8c 01       	movw	r16, r24
    1a68:	c8 01       	movw	r24, r16
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <__vector_1+0x264>
    1a6e:	8c 01       	movw	r16, r24
    1a70:	1a 8f       	std	Y+26, r17	; 0x1a
    1a72:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a74:	8f 89       	ldd	r24, Y+23	; 0x17
    1a76:	98 8d       	ldd	r25, Y+24	; 0x18
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	98 8f       	std	Y+24, r25	; 0x18
    1a7c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a80:	98 8d       	ldd	r25, Y+24	; 0x18
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	51 f7       	brne	.-44     	; 0x1a5a <__vector_1+0x254>
    1a86:	17 c0       	rjmp	.+46     	; 0x1ab6 <__vector_1+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a88:	6b 89       	ldd	r22, Y+19	; 0x13
    1a8a:	7c 89       	ldd	r23, Y+20	; 0x14
    1a8c:	8d 89       	ldd	r24, Y+21	; 0x15
    1a8e:	9e 89       	ldd	r25, Y+22	; 0x16
    1a90:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	98 8f       	std	Y+24, r25	; 0x18
    1a9a:	8f 8b       	std	Y+23, r24	; 0x17
    1a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa0:	9c 8f       	std	Y+28, r25	; 0x1c
    1aa2:	8b 8f       	std	Y+27, r24	; 0x1b
    1aa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa8:	8c 01       	movw	r16, r24
    1aaa:	f8 01       	movw	r30, r16
    1aac:	31 97       	sbiw	r30, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <__vector_1+0x2a6>
    1ab0:	8f 01       	movw	r16, r30
    1ab2:	1c 8f       	std	Y+28, r17	; 0x1c
    1ab4:	0b 8f       	std	Y+27, r16	; 0x1b
        _delay_ms(25);
        check_number();
    1ab6:	83 e6       	ldi	r24, 0x63	; 99
    1ab8:	9e e0       	ldi	r25, 0x0E	; 14
    1aba:	fc 01       	movw	r30, r24
    1abc:	09 95       	icall
        show_letter();
    1abe:	84 e8       	ldi	r24, 0x84	; 132
    1ac0:	9e e0       	ldi	r25, 0x0E	; 14
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	09 95       	icall

    }


    if ((PIND & 0b01000000) == 0)           // zatwierdz
    1ac6:	80 e3       	ldi	r24, 0x30	; 48
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	fc 01       	movw	r30, r24
    1acc:	80 81       	ld	r24, Z
    1ace:	88 2f       	mov	r24, r24
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	80 74       	andi	r24, 0x40	; 64
    1ad4:	90 70       	andi	r25, 0x00	; 0
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <__vector_1+0x2d6>
    1ada:	bd c0       	rjmp	.+378    	; 0x1c56 <__vector_1+0x450>
    {



        show_letter();
    1adc:	84 e8       	ldi	r24, 0x84	; 132
    1ade:	9e e0       	ldi	r25, 0x0E	; 14
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	09 95       	icall



        if (letter_number == 0)
    1ae4:	80 91 c2 00 	lds	r24, 0x00C2
    1ae8:	90 91 c3 00 	lds	r25, 0x00C3
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	79 f4       	brne	.+30     	; 0x1b0e <__vector_1+0x308>
        {

            imie[imie_count] = " ";
    1af0:	80 91 c4 00 	lds	r24, 0x00C4
    1af4:	90 91 c5 00 	lds	r25, 0x00C5
    1af8:	2f e9       	ldi	r18, 0x9F	; 159
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	8a 53       	subi	r24, 0x3A	; 58
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	fc 01       	movw	r30, r24
    1b02:	20 83       	st	Z, r18
            LCD_WriteText(" ");
    1b04:	8f e9       	ldi	r24, 0x9F	; 159
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
    1b0c:	0e c0       	rjmp	.+28     	; 0x1b2a <__vector_1+0x324>

        }
        else
        {
            imie[imie_count] = prompt;
    1b0e:	80 91 c4 00 	lds	r24, 0x00C4
    1b12:	90 91 c5 00 	lds	r25, 0x00C5
    1b16:	2a ed       	ldi	r18, 0xDA	; 218
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	8a 53       	subi	r24, 0x3A	; 58
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	fc 01       	movw	r30, r24
    1b20:	20 83       	st	Z, r18
            LCD_WriteText(prompt);
    1b22:	8a ed       	ldi	r24, 0xDA	; 218
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
        }

        lcd_position_h++;
    1b2a:	80 91 bc 00 	lds	r24, 0x00BC
    1b2e:	90 91 bd 00 	lds	r25, 0x00BD
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	90 93 bd 00 	sts	0x00BD, r25
    1b38:	80 93 bc 00 	sts	0x00BC, r24
        letter_number = 0;
    1b3c:	10 92 c3 00 	sts	0x00C3, r1
    1b40:	10 92 c2 00 	sts	0x00C2, r1
        imie_count++;
    1b44:	80 91 c4 00 	lds	r24, 0x00C4
    1b48:	90 91 c5 00 	lds	r25, 0x00C5
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	90 93 c5 00 	sts	0x00C5, r25
    1b52:	80 93 c4 00 	sts	0x00C4, r24
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a8 ec       	ldi	r26, 0xC8	; 200
    1b5c:	b1 e4       	ldi	r27, 0x41	; 65
    1b5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b60:	9e 8f       	std	Y+30, r25	; 0x1e
    1b62:	af 8f       	std	Y+31, r26	; 0x1f
    1b64:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b66:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b68:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4a e7       	ldi	r20, 0x7A	; 122
    1b74:	55 e4       	ldi	r21, 0x45	; 69
    1b76:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	89 a3       	std	Y+33, r24	; 0x21
    1b80:	9a a3       	std	Y+34, r25	; 0x22
    1b82:	ab a3       	std	Y+35, r26	; 0x23
    1b84:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1b86:	11 e0       	ldi	r17, 0x01	; 1
    1b88:	69 a1       	ldd	r22, Y+33	; 0x21
    1b8a:	7a a1       	ldd	r23, Y+34	; 0x22
    1b8c:	8b a1       	ldd	r24, Y+35	; 0x23
    1b8e:	9c a1       	ldd	r25, Y+36	; 0x24
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e8       	ldi	r20, 0x80	; 128
    1b96:	5f e3       	ldi	r21, 0x3F	; 63
    1b98:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__ltsf2>
    1b9c:	88 23       	and	r24, r24
    1b9e:	0c f0       	brlt	.+2      	; 0x1ba2 <__vector_1+0x39c>
    1ba0:	10 e0       	ldi	r17, 0x00	; 0
    1ba2:	11 23       	and	r17, r17
    1ba4:	29 f0       	breq	.+10     	; 0x1bb0 <__vector_1+0x3aa>
		__ticks = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9e a3       	std	Y+38, r25	; 0x26
    1bac:	8d a3       	std	Y+37, r24	; 0x25
    1bae:	46 c0       	rjmp	.+140    	; 0x1c3c <__vector_1+0x436>
	else if (__tmp > 65535)
    1bb0:	11 e0       	ldi	r17, 0x01	; 1
    1bb2:	69 a1       	ldd	r22, Y+33	; 0x21
    1bb4:	7a a1       	ldd	r23, Y+34	; 0x22
    1bb6:	8b a1       	ldd	r24, Y+35	; 0x23
    1bb8:	9c a1       	ldd	r25, Y+36	; 0x24
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	57 e4       	ldi	r21, 0x47	; 71
    1bc2:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gtsf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	0c f0       	brlt	.+2      	; 0x1bcc <__vector_1+0x3c6>
    1bca:	10 e0       	ldi	r17, 0x00	; 0
    1bcc:	11 23       	and	r17, r17
    1bce:	61 f1       	breq	.+88     	; 0x1c28 <__vector_1+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bd2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1bd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bd6:	98 a1       	ldd	r25, Y+32	; 0x20
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9e a3       	std	Y+38, r25	; 0x26
    1bf6:	8d a3       	std	Y+37, r24	; 0x25
    1bf8:	12 c0       	rjmp	.+36     	; 0x1c1e <__vector_1+0x418>
    1bfa:	80 e9       	ldi	r24, 0x90	; 144
    1bfc:	91 e0       	ldi	r25, 0x01	; 1
    1bfe:	98 a7       	std	Y+40, r25	; 0x28
    1c00:	8f a3       	std	Y+39, r24	; 0x27
    1c02:	8f a1       	ldd	r24, Y+39	; 0x27
    1c04:	98 a5       	ldd	r25, Y+40	; 0x28
    1c06:	8c 01       	movw	r16, r24
    1c08:	c8 01       	movw	r24, r16
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <__vector_1+0x404>
    1c0e:	8c 01       	movw	r16, r24
    1c10:	18 a7       	std	Y+40, r17	; 0x28
    1c12:	0f a3       	std	Y+39, r16	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c14:	8d a1       	ldd	r24, Y+37	; 0x25
    1c16:	9e a1       	ldd	r25, Y+38	; 0x26
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	9e a3       	std	Y+38, r25	; 0x26
    1c1c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c20:	9e a1       	ldd	r25, Y+38	; 0x26
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	51 f7       	brne	.-44     	; 0x1bfa <__vector_1+0x3f4>
    1c26:	17 c0       	rjmp	.+46     	; 0x1c56 <__vector_1+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c28:	69 a1       	ldd	r22, Y+33	; 0x21
    1c2a:	7a a1       	ldd	r23, Y+34	; 0x22
    1c2c:	8b a1       	ldd	r24, Y+35	; 0x23
    1c2e:	9c a1       	ldd	r25, Y+36	; 0x24
    1c30:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9e a3       	std	Y+38, r25	; 0x26
    1c3a:	8d a3       	std	Y+37, r24	; 0x25
    1c3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c40:	9a a7       	std	Y+42, r25	; 0x2a
    1c42:	89 a7       	std	Y+41, r24	; 0x29
    1c44:	89 a5       	ldd	r24, Y+41	; 0x29
    1c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c48:	8c 01       	movw	r16, r24
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	31 97       	sbiw	r30, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <__vector_1+0x446>
    1c50:	8f 01       	movw	r16, r30
    1c52:	1a a7       	std	Y+42, r17	; 0x2a
    1c54:	09 a7       	std	Y+41, r16	; 0x29

        _delay_ms(25);

    }

    if ((PIND & 0b10000000) == 0)
    1c56:	80 e3       	ldi	r24, 0x30	; 48
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	a4 f0       	brlt	.+40     	; 0x1c8a <__vector_1+0x484>
    {

        LCD_Clear();
    1c62:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
        LCD_Home();
    1c66:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_Home>

        LCD_WriteText("Czesc");
    1c6a:	81 ea       	ldi	r24, 0xA1	; 161
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
        LCD_GoTo(0,1);
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	61 e0       	ldi	r22, 0x01	; 1
    1c76:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>



        LCD_WriteText("Jak leci? :)");
    1c7a:	87 ea       	ldi	r24, 0xA7	; 167
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>

        exit(0);
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 c5 14 	call	0x298a	; 0x298a <_exit>
    }


    interrupt = 0;
    1c8a:	10 92 c1 00 	sts	0x00C1, r1
    1c8e:	10 92 c0 00 	sts	0x00C0, r1
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <__vector_1+0x490>

    if (interrupt == 1)
    {


        return;
    1c94:	00 00       	nop
    }


    interrupt = 0;

}
    1c96:	aa 96       	adiw	r28, 0x2a	; 42
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	bf 91       	pop	r27
    1ca6:	af 91       	pop	r26
    1ca8:	9f 91       	pop	r25
    1caa:	8f 91       	pop	r24
    1cac:	7f 91       	pop	r23
    1cae:	6f 91       	pop	r22
    1cb0:	5f 91       	pop	r21
    1cb2:	4f 91       	pop	r20
    1cb4:	3f 91       	pop	r19
    1cb6:	2f 91       	pop	r18
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	0f 90       	pop	r0
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	0f 90       	pop	r0
    1cc2:	1f 90       	pop	r1
    1cc4:	18 95       	reti

00001cc6 <check_number>:

void check_number()
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62

    if (letter_number <= 0)
    1cce:	80 91 c2 00 	lds	r24, 0x00C2
    1cd2:	90 91 c3 00 	lds	r25, 0x00C3
    1cd6:	18 16       	cp	r1, r24
    1cd8:	19 06       	cpc	r1, r25
    1cda:	34 f0       	brlt	.+12     	; 0x1ce8 <check_number+0x22>
    {

        letter_number = 26;
    1cdc:	8a e1       	ldi	r24, 0x1A	; 26
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	90 93 c3 00 	sts	0x00C3, r25
    1ce4:	80 93 c2 00 	sts	0x00C2, r24

    }
    if (letter_number >= 27)
    1ce8:	80 91 c2 00 	lds	r24, 0x00C2
    1cec:	90 91 c3 00 	lds	r25, 0x00C3
    1cf0:	8b 31       	cpi	r24, 0x1B	; 27
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	34 f0       	brlt	.+12     	; 0x1d02 <check_number+0x3c>
    {

        letter_number = 1;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	90 93 c3 00 	sts	0x00C3, r25
    1cfe:	80 93 c2 00 	sts	0x00C2, r24

    }
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <show_letter>:

void show_letter()
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
        prompt[0] = alfabet[letter_number];
    1d10:	80 91 c2 00 	lds	r24, 0x00C2
    1d14:	90 91 c3 00 	lds	r25, 0x00C3
    1d18:	80 5a       	subi	r24, 0xA0	; 160
    1d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	80 81       	ld	r24, Z
    1d20:	80 93 da 00 	sts	0x00DA, r24
        LCD_WriteText(prompt);
    1d24:	8a ed       	ldi	r24, 0xDA	; 218
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteText>
        LCD_GoTo(lcd_position_h, 1);
    1d2c:	80 91 bc 00 	lds	r24, 0x00BC
    1d30:	90 91 bd 00 	lds	r25, 0x00BD
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>


}
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <__fixunssfsi>:
    1d40:	ef 92       	push	r14
    1d42:	ff 92       	push	r15
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	7b 01       	movw	r14, r22
    1d4a:	8c 01       	movw	r16, r24
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	5f e4       	ldi	r21, 0x4F	; 79
    1d54:	0e 94 4c 12 	call	0x2498	; 0x2498 <__gesf2>
    1d58:	87 fd       	sbrc	r24, 7
    1d5a:	11 c0       	rjmp	.+34     	; 0x1d7e <__fixunssfsi+0x3e>
    1d5c:	c8 01       	movw	r24, r16
    1d5e:	b7 01       	movw	r22, r14
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	5f e4       	ldi	r21, 0x4F	; 79
    1d68:	0e 94 43 10 	call	0x2086	; 0x2086 <__subsf3>
    1d6c:	0e 94 ac 12 	call	0x2558	; 0x2558 <__fixsfsi>
    1d70:	9b 01       	movw	r18, r22
    1d72:	ac 01       	movw	r20, r24
    1d74:	20 50       	subi	r18, 0x00	; 0
    1d76:	30 40       	sbci	r19, 0x00	; 0
    1d78:	40 40       	sbci	r20, 0x00	; 0
    1d7a:	50 48       	sbci	r21, 0x80	; 128
    1d7c:	06 c0       	rjmp	.+12     	; 0x1d8a <__fixunssfsi+0x4a>
    1d7e:	c8 01       	movw	r24, r16
    1d80:	b7 01       	movw	r22, r14
    1d82:	0e 94 ac 12 	call	0x2558	; 0x2558 <__fixsfsi>
    1d86:	9b 01       	movw	r18, r22
    1d88:	ac 01       	movw	r20, r24
    1d8a:	b9 01       	movw	r22, r18
    1d8c:	ca 01       	movw	r24, r20
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	08 95       	ret

00001d98 <_fpadd_parts>:
    1d98:	a0 e0       	ldi	r26, 0x00	; 0
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e2 ed       	ldi	r30, 0xD2	; 210
    1d9e:	fe e0       	ldi	r31, 0x0E	; 14
    1da0:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__prologue_saves__+0x8>
    1da4:	fc 01       	movw	r30, r24
    1da6:	ea 01       	movw	r28, r20
    1da8:	80 81       	ld	r24, Z
    1daa:	82 30       	cpi	r24, 0x02	; 2
    1dac:	08 f4       	brcc	.+2      	; 0x1db0 <_fpadd_parts+0x18>
    1dae:	38 c1       	rjmp	.+624    	; 0x2020 <_fpadd_parts+0x288>
    1db0:	db 01       	movw	r26, r22
    1db2:	9c 91       	ld	r25, X
    1db4:	92 30       	cpi	r25, 0x02	; 2
    1db6:	08 f4       	brcc	.+2      	; 0x1dba <_fpadd_parts+0x22>
    1db8:	30 c1       	rjmp	.+608    	; 0x201a <_fpadd_parts+0x282>
    1dba:	84 30       	cpi	r24, 0x04	; 4
    1dbc:	59 f4       	brne	.+22     	; 0x1dd4 <_fpadd_parts+0x3c>
    1dbe:	94 30       	cpi	r25, 0x04	; 4
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <_fpadd_parts+0x2c>
    1dc2:	2e c1       	rjmp	.+604    	; 0x2020 <_fpadd_parts+0x288>
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	11 96       	adiw	r26, 0x01	; 1
    1dc8:	8c 91       	ld	r24, X
    1dca:	11 97       	sbiw	r26, 0x01	; 1
    1dcc:	98 17       	cp	r25, r24
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <_fpadd_parts+0x3a>
    1dd0:	21 c1       	rjmp	.+578    	; 0x2014 <_fpadd_parts+0x27c>
    1dd2:	26 c1       	rjmp	.+588    	; 0x2020 <_fpadd_parts+0x288>
    1dd4:	94 30       	cpi	r25, 0x04	; 4
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <_fpadd_parts+0x42>
    1dd8:	20 c1       	rjmp	.+576    	; 0x201a <_fpadd_parts+0x282>
    1dda:	92 30       	cpi	r25, 0x02	; 2
    1ddc:	b1 f4       	brne	.+44     	; 0x1e0a <_fpadd_parts+0x72>
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <_fpadd_parts+0x4c>
    1de2:	1e c1       	rjmp	.+572    	; 0x2020 <_fpadd_parts+0x288>
    1de4:	ca 01       	movw	r24, r20
    1de6:	af 01       	movw	r20, r30
    1de8:	28 e0       	ldi	r18, 0x08	; 8
    1dea:	da 01       	movw	r26, r20
    1dec:	0d 90       	ld	r0, X+
    1dee:	ad 01       	movw	r20, r26
    1df0:	dc 01       	movw	r26, r24
    1df2:	0d 92       	st	X+, r0
    1df4:	cd 01       	movw	r24, r26
    1df6:	21 50       	subi	r18, 0x01	; 1
    1df8:	c1 f7       	brne	.-16     	; 0x1dea <_fpadd_parts+0x52>
    1dfa:	db 01       	movw	r26, r22
    1dfc:	11 96       	adiw	r26, 0x01	; 1
    1dfe:	8c 91       	ld	r24, X
    1e00:	11 97       	sbiw	r26, 0x01	; 1
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	89 23       	and	r24, r25
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	0a c1       	rjmp	.+532    	; 0x201e <_fpadd_parts+0x286>
    1e0a:	82 30       	cpi	r24, 0x02	; 2
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <_fpadd_parts+0x78>
    1e0e:	05 c1       	rjmp	.+522    	; 0x201a <_fpadd_parts+0x282>
    1e10:	c2 80       	ldd	r12, Z+2	; 0x02
    1e12:	d3 80       	ldd	r13, Z+3	; 0x03
    1e14:	db 01       	movw	r26, r22
    1e16:	12 96       	adiw	r26, 0x02	; 2
    1e18:	6d 90       	ld	r6, X+
    1e1a:	7c 90       	ld	r7, X
    1e1c:	13 97       	sbiw	r26, 0x03	; 3
    1e1e:	24 81       	ldd	r18, Z+4	; 0x04
    1e20:	35 81       	ldd	r19, Z+5	; 0x05
    1e22:	46 81       	ldd	r20, Z+6	; 0x06
    1e24:	57 81       	ldd	r21, Z+7	; 0x07
    1e26:	14 96       	adiw	r26, 0x04	; 4
    1e28:	ed 90       	ld	r14, X+
    1e2a:	fd 90       	ld	r15, X+
    1e2c:	0d 91       	ld	r16, X+
    1e2e:	1c 91       	ld	r17, X
    1e30:	17 97       	sbiw	r26, 0x07	; 7
    1e32:	c6 01       	movw	r24, r12
    1e34:	86 19       	sub	r24, r6
    1e36:	97 09       	sbc	r25, r7
    1e38:	5c 01       	movw	r10, r24
    1e3a:	97 ff       	sbrs	r25, 7
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <_fpadd_parts+0xae>
    1e3e:	aa 24       	eor	r10, r10
    1e40:	bb 24       	eor	r11, r11
    1e42:	a8 1a       	sub	r10, r24
    1e44:	b9 0a       	sbc	r11, r25
    1e46:	b0 e2       	ldi	r27, 0x20	; 32
    1e48:	ab 16       	cp	r10, r27
    1e4a:	b1 04       	cpc	r11, r1
    1e4c:	0c f0       	brlt	.+2      	; 0x1e50 <_fpadd_parts+0xb8>
    1e4e:	61 c0       	rjmp	.+194    	; 0x1f12 <_fpadd_parts+0x17a>
    1e50:	18 16       	cp	r1, r24
    1e52:	19 06       	cpc	r1, r25
    1e54:	6c f5       	brge	.+90     	; 0x1eb0 <_fpadd_parts+0x118>
    1e56:	37 01       	movw	r6, r14
    1e58:	48 01       	movw	r8, r16
    1e5a:	0a 2c       	mov	r0, r10
    1e5c:	04 c0       	rjmp	.+8      	; 0x1e66 <_fpadd_parts+0xce>
    1e5e:	96 94       	lsr	r9
    1e60:	87 94       	ror	r8
    1e62:	77 94       	ror	r7
    1e64:	67 94       	ror	r6
    1e66:	0a 94       	dec	r0
    1e68:	d2 f7       	brpl	.-12     	; 0x1e5e <_fpadd_parts+0xc6>
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a0 e0       	ldi	r26, 0x00	; 0
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	0a 2c       	mov	r0, r10
    1e74:	04 c0       	rjmp	.+8      	; 0x1e7e <_fpadd_parts+0xe6>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	aa 1f       	adc	r26, r26
    1e7c:	bb 1f       	adc	r27, r27
    1e7e:	0a 94       	dec	r0
    1e80:	d2 f7       	brpl	.-12     	; 0x1e76 <_fpadd_parts+0xde>
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	a1 09       	sbc	r26, r1
    1e86:	b1 09       	sbc	r27, r1
    1e88:	8e 21       	and	r24, r14
    1e8a:	9f 21       	and	r25, r15
    1e8c:	a0 23       	and	r26, r16
    1e8e:	b1 23       	and	r27, r17
    1e90:	ee 24       	eor	r14, r14
    1e92:	ff 24       	eor	r15, r15
    1e94:	87 01       	movw	r16, r14
    1e96:	e3 94       	inc	r14
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	a1 05       	cpc	r26, r1
    1e9c:	b1 05       	cpc	r27, r1
    1e9e:	19 f4       	brne	.+6      	; 0x1ea6 <_fpadd_parts+0x10e>
    1ea0:	ee 24       	eor	r14, r14
    1ea2:	ff 24       	eor	r15, r15
    1ea4:	87 01       	movw	r16, r14
    1ea6:	e6 28       	or	r14, r6
    1ea8:	f7 28       	or	r15, r7
    1eaa:	08 29       	or	r16, r8
    1eac:	19 29       	or	r17, r9
    1eae:	3c c0       	rjmp	.+120    	; 0x1f28 <_fpadd_parts+0x190>
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	d1 f1       	breq	.+116    	; 0x1f28 <_fpadd_parts+0x190>
    1eb4:	ca 0c       	add	r12, r10
    1eb6:	db 1c       	adc	r13, r11
    1eb8:	39 01       	movw	r6, r18
    1eba:	4a 01       	movw	r8, r20
    1ebc:	0a 2c       	mov	r0, r10
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <_fpadd_parts+0x130>
    1ec0:	96 94       	lsr	r9
    1ec2:	87 94       	ror	r8
    1ec4:	77 94       	ror	r7
    1ec6:	67 94       	ror	r6
    1ec8:	0a 94       	dec	r0
    1eca:	d2 f7       	brpl	.-12     	; 0x1ec0 <_fpadd_parts+0x128>
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a0 e0       	ldi	r26, 0x00	; 0
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	0a 2c       	mov	r0, r10
    1ed6:	04 c0       	rjmp	.+8      	; 0x1ee0 <_fpadd_parts+0x148>
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	aa 1f       	adc	r26, r26
    1ede:	bb 1f       	adc	r27, r27
    1ee0:	0a 94       	dec	r0
    1ee2:	d2 f7       	brpl	.-12     	; 0x1ed8 <_fpadd_parts+0x140>
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	a1 09       	sbc	r26, r1
    1ee8:	b1 09       	sbc	r27, r1
    1eea:	82 23       	and	r24, r18
    1eec:	93 23       	and	r25, r19
    1eee:	a4 23       	and	r26, r20
    1ef0:	b5 23       	and	r27, r21
    1ef2:	21 e0       	ldi	r18, 0x01	; 1
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	a1 05       	cpc	r26, r1
    1efe:	b1 05       	cpc	r27, r1
    1f00:	19 f4       	brne	.+6      	; 0x1f08 <_fpadd_parts+0x170>
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	a9 01       	movw	r20, r18
    1f08:	26 29       	or	r18, r6
    1f0a:	37 29       	or	r19, r7
    1f0c:	48 29       	or	r20, r8
    1f0e:	59 29       	or	r21, r9
    1f10:	0b c0       	rjmp	.+22     	; 0x1f28 <_fpadd_parts+0x190>
    1f12:	6c 14       	cp	r6, r12
    1f14:	7d 04       	cpc	r7, r13
    1f16:	24 f4       	brge	.+8      	; 0x1f20 <_fpadd_parts+0x188>
    1f18:	ee 24       	eor	r14, r14
    1f1a:	ff 24       	eor	r15, r15
    1f1c:	87 01       	movw	r16, r14
    1f1e:	04 c0       	rjmp	.+8      	; 0x1f28 <_fpadd_parts+0x190>
    1f20:	63 01       	movw	r12, r6
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	a9 01       	movw	r20, r18
    1f28:	81 81       	ldd	r24, Z+1	; 0x01
    1f2a:	fb 01       	movw	r30, r22
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
    1f2e:	89 17       	cp	r24, r25
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <_fpadd_parts+0x19c>
    1f32:	45 c0       	rjmp	.+138    	; 0x1fbe <_fpadd_parts+0x226>
    1f34:	88 23       	and	r24, r24
    1f36:	49 f0       	breq	.+18     	; 0x1f4a <_fpadd_parts+0x1b2>
    1f38:	d8 01       	movw	r26, r16
    1f3a:	c7 01       	movw	r24, r14
    1f3c:	82 1b       	sub	r24, r18
    1f3e:	93 0b       	sbc	r25, r19
    1f40:	a4 0b       	sbc	r26, r20
    1f42:	b5 0b       	sbc	r27, r21
    1f44:	9c 01       	movw	r18, r24
    1f46:	ad 01       	movw	r20, r26
    1f48:	04 c0       	rjmp	.+8      	; 0x1f52 <_fpadd_parts+0x1ba>
    1f4a:	2e 19       	sub	r18, r14
    1f4c:	3f 09       	sbc	r19, r15
    1f4e:	40 0b       	sbc	r20, r16
    1f50:	51 0b       	sbc	r21, r17
    1f52:	57 fd       	sbrc	r21, 7
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <_fpadd_parts+0x1c6>
    1f56:	19 82       	std	Y+1, r1	; 0x01
    1f58:	db 82       	std	Y+3, r13	; 0x03
    1f5a:	ca 82       	std	Y+2, r12	; 0x02
    1f5c:	0b c0       	rjmp	.+22     	; 0x1f74 <_fpadd_parts+0x1dc>
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	db 82       	std	Y+3, r13	; 0x03
    1f64:	ca 82       	std	Y+2, r12	; 0x02
    1f66:	50 95       	com	r21
    1f68:	40 95       	com	r20
    1f6a:	30 95       	com	r19
    1f6c:	21 95       	neg	r18
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	4f 4f       	sbci	r20, 0xFF	; 255
    1f72:	5f 4f       	sbci	r21, 0xFF	; 255
    1f74:	2c 83       	std	Y+4, r18	; 0x04
    1f76:	3d 83       	std	Y+5, r19	; 0x05
    1f78:	4e 83       	std	Y+6, r20	; 0x06
    1f7a:	5f 83       	std	Y+7, r21	; 0x07
    1f7c:	0d c0       	rjmp	.+26     	; 0x1f98 <_fpadd_parts+0x200>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	aa 1f       	adc	r26, r26
    1f84:	bb 1f       	adc	r27, r27
    1f86:	8c 83       	std	Y+4, r24	; 0x04
    1f88:	9d 83       	std	Y+5, r25	; 0x05
    1f8a:	ae 83       	std	Y+6, r26	; 0x06
    1f8c:	bf 83       	std	Y+7, r27	; 0x07
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	9b 81       	ldd	r25, Y+3	; 0x03
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9b 83       	std	Y+3, r25	; 0x03
    1f96:	8a 83       	std	Y+2, r24	; 0x02
    1f98:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9c:	ae 81       	ldd	r26, Y+6	; 0x06
    1f9e:	bf 81       	ldd	r27, Y+7	; 0x07
    1fa0:	9c 01       	movw	r18, r24
    1fa2:	ad 01       	movw	r20, r26
    1fa4:	21 50       	subi	r18, 0x01	; 1
    1fa6:	30 40       	sbci	r19, 0x00	; 0
    1fa8:	40 40       	sbci	r20, 0x00	; 0
    1faa:	50 40       	sbci	r21, 0x00	; 0
    1fac:	2f 3f       	cpi	r18, 0xFF	; 255
    1fae:	ef ef       	ldi	r30, 0xFF	; 255
    1fb0:	3e 07       	cpc	r19, r30
    1fb2:	ef ef       	ldi	r30, 0xFF	; 255
    1fb4:	4e 07       	cpc	r20, r30
    1fb6:	ef e3       	ldi	r30, 0x3F	; 63
    1fb8:	5e 07       	cpc	r21, r30
    1fba:	08 f3       	brcs	.-62     	; 0x1f7e <_fpadd_parts+0x1e6>
    1fbc:	0b c0       	rjmp	.+22     	; 0x1fd4 <_fpadd_parts+0x23c>
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	db 82       	std	Y+3, r13	; 0x03
    1fc2:	ca 82       	std	Y+2, r12	; 0x02
    1fc4:	2e 0d       	add	r18, r14
    1fc6:	3f 1d       	adc	r19, r15
    1fc8:	40 1f       	adc	r20, r16
    1fca:	51 1f       	adc	r21, r17
    1fcc:	2c 83       	std	Y+4, r18	; 0x04
    1fce:	3d 83       	std	Y+5, r19	; 0x05
    1fd0:	4e 83       	std	Y+6, r20	; 0x06
    1fd2:	5f 83       	std	Y+7, r21	; 0x07
    1fd4:	83 e0       	ldi	r24, 0x03	; 3
    1fd6:	88 83       	st	Y, r24
    1fd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1fda:	3d 81       	ldd	r19, Y+5	; 0x05
    1fdc:	4e 81       	ldd	r20, Y+6	; 0x06
    1fde:	5f 81       	ldd	r21, Y+7	; 0x07
    1fe0:	57 ff       	sbrs	r21, 7
    1fe2:	1d c0       	rjmp	.+58     	; 0x201e <_fpadd_parts+0x286>
    1fe4:	da 01       	movw	r26, r20
    1fe6:	c9 01       	movw	r24, r18
    1fe8:	81 70       	andi	r24, 0x01	; 1
    1fea:	90 70       	andi	r25, 0x00	; 0
    1fec:	a0 70       	andi	r26, 0x00	; 0
    1fee:	b0 70       	andi	r27, 0x00	; 0
    1ff0:	56 95       	lsr	r21
    1ff2:	47 95       	ror	r20
    1ff4:	37 95       	ror	r19
    1ff6:	27 95       	ror	r18
    1ff8:	82 2b       	or	r24, r18
    1ffa:	93 2b       	or	r25, r19
    1ffc:	a4 2b       	or	r26, r20
    1ffe:	b5 2b       	or	r27, r21
    2000:	8c 83       	std	Y+4, r24	; 0x04
    2002:	9d 83       	std	Y+5, r25	; 0x05
    2004:	ae 83       	std	Y+6, r26	; 0x06
    2006:	bf 83       	std	Y+7, r27	; 0x07
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	9b 81       	ldd	r25, Y+3	; 0x03
    200c:	01 96       	adiw	r24, 0x01	; 1
    200e:	9b 83       	std	Y+3, r25	; 0x03
    2010:	8a 83       	std	Y+2, r24	; 0x02
    2012:	05 c0       	rjmp	.+10     	; 0x201e <_fpadd_parts+0x286>
    2014:	e4 eb       	ldi	r30, 0xB4	; 180
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	03 c0       	rjmp	.+6      	; 0x2020 <_fpadd_parts+0x288>
    201a:	fb 01       	movw	r30, r22
    201c:	01 c0       	rjmp	.+2      	; 0x2020 <_fpadd_parts+0x288>
    201e:	fe 01       	movw	r30, r28
    2020:	cf 01       	movw	r24, r30
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	ee e0       	ldi	r30, 0x0E	; 14
    2028:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__epilogue_restores__+0x8>

0000202c <__addsf3>:
    202c:	a0 e2       	ldi	r26, 0x20	; 32
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	ec e1       	ldi	r30, 0x1C	; 28
    2032:	f0 e1       	ldi	r31, 0x10	; 16
    2034:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__+0x18>
    2038:	69 83       	std	Y+1, r22	; 0x01
    203a:	7a 83       	std	Y+2, r23	; 0x02
    203c:	8b 83       	std	Y+3, r24	; 0x03
    203e:	9c 83       	std	Y+4, r25	; 0x04
    2040:	2d 83       	std	Y+5, r18	; 0x05
    2042:	3e 83       	std	Y+6, r19	; 0x06
    2044:	4f 83       	std	Y+7, r20	; 0x07
    2046:	58 87       	std	Y+8, r21	; 0x08
    2048:	89 e0       	ldi	r24, 0x09	; 9
    204a:	e8 2e       	mov	r14, r24
    204c:	f1 2c       	mov	r15, r1
    204e:	ec 0e       	add	r14, r28
    2050:	fd 1e       	adc	r15, r29
    2052:	ce 01       	movw	r24, r28
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	b7 01       	movw	r22, r14
    2058:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    205c:	8e 01       	movw	r16, r28
    205e:	0f 5e       	subi	r16, 0xEF	; 239
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	ce 01       	movw	r24, r28
    2064:	05 96       	adiw	r24, 0x05	; 5
    2066:	b8 01       	movw	r22, r16
    2068:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    206c:	c7 01       	movw	r24, r14
    206e:	b8 01       	movw	r22, r16
    2070:	ae 01       	movw	r20, r28
    2072:	47 5e       	subi	r20, 0xE7	; 231
    2074:	5f 4f       	sbci	r21, 0xFF	; 255
    2076:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_fpadd_parts>
    207a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__pack_f>
    207e:	a0 96       	adiw	r28, 0x20	; 32
    2080:	e6 e0       	ldi	r30, 0x06	; 6
    2082:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__+0x18>

00002086 <__subsf3>:
    2086:	a0 e2       	ldi	r26, 0x20	; 32
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e9 e4       	ldi	r30, 0x49	; 73
    208c:	f0 e1       	ldi	r31, 0x10	; 16
    208e:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__+0x18>
    2092:	69 83       	std	Y+1, r22	; 0x01
    2094:	7a 83       	std	Y+2, r23	; 0x02
    2096:	8b 83       	std	Y+3, r24	; 0x03
    2098:	9c 83       	std	Y+4, r25	; 0x04
    209a:	2d 83       	std	Y+5, r18	; 0x05
    209c:	3e 83       	std	Y+6, r19	; 0x06
    209e:	4f 83       	std	Y+7, r20	; 0x07
    20a0:	58 87       	std	Y+8, r21	; 0x08
    20a2:	8e 01       	movw	r16, r28
    20a4:	07 5f       	subi	r16, 0xF7	; 247
    20a6:	1f 4f       	sbci	r17, 0xFF	; 255
    20a8:	ce 01       	movw	r24, r28
    20aa:	01 96       	adiw	r24, 0x01	; 1
    20ac:	b8 01       	movw	r22, r16
    20ae:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    20b2:	91 e1       	ldi	r25, 0x11	; 17
    20b4:	e9 2e       	mov	r14, r25
    20b6:	f1 2c       	mov	r15, r1
    20b8:	ec 0e       	add	r14, r28
    20ba:	fd 1e       	adc	r15, r29
    20bc:	ce 01       	movw	r24, r28
    20be:	05 96       	adiw	r24, 0x05	; 5
    20c0:	b7 01       	movw	r22, r14
    20c2:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    20c6:	8a 89       	ldd	r24, Y+18	; 0x12
    20c8:	91 e0       	ldi	r25, 0x01	; 1
    20ca:	89 27       	eor	r24, r25
    20cc:	8a 8b       	std	Y+18, r24	; 0x12
    20ce:	c8 01       	movw	r24, r16
    20d0:	b7 01       	movw	r22, r14
    20d2:	ae 01       	movw	r20, r28
    20d4:	47 5e       	subi	r20, 0xE7	; 231
    20d6:	5f 4f       	sbci	r21, 0xFF	; 255
    20d8:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_fpadd_parts>
    20dc:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__pack_f>
    20e0:	a0 96       	adiw	r28, 0x20	; 32
    20e2:	e6 e0       	ldi	r30, 0x06	; 6
    20e4:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__+0x18>

000020e8 <__mulsf3>:
    20e8:	a0 e2       	ldi	r26, 0x20	; 32
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	ea e7       	ldi	r30, 0x7A	; 122
    20ee:	f0 e1       	ldi	r31, 0x10	; 16
    20f0:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__prologue_saves__>
    20f4:	69 83       	std	Y+1, r22	; 0x01
    20f6:	7a 83       	std	Y+2, r23	; 0x02
    20f8:	8b 83       	std	Y+3, r24	; 0x03
    20fa:	9c 83       	std	Y+4, r25	; 0x04
    20fc:	2d 83       	std	Y+5, r18	; 0x05
    20fe:	3e 83       	std	Y+6, r19	; 0x06
    2100:	4f 83       	std	Y+7, r20	; 0x07
    2102:	58 87       	std	Y+8, r21	; 0x08
    2104:	ce 01       	movw	r24, r28
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	be 01       	movw	r22, r28
    210a:	67 5f       	subi	r22, 0xF7	; 247
    210c:	7f 4f       	sbci	r23, 0xFF	; 255
    210e:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    2112:	ce 01       	movw	r24, r28
    2114:	05 96       	adiw	r24, 0x05	; 5
    2116:	be 01       	movw	r22, r28
    2118:	6f 5e       	subi	r22, 0xEF	; 239
    211a:	7f 4f       	sbci	r23, 0xFF	; 255
    211c:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    2120:	99 85       	ldd	r25, Y+9	; 0x09
    2122:	92 30       	cpi	r25, 0x02	; 2
    2124:	78 f0       	brcs	.+30     	; 0x2144 <__mulsf3+0x5c>
    2126:	89 89       	ldd	r24, Y+17	; 0x11
    2128:	82 30       	cpi	r24, 0x02	; 2
    212a:	c0 f0       	brcs	.+48     	; 0x215c <__mulsf3+0x74>
    212c:	94 30       	cpi	r25, 0x04	; 4
    212e:	19 f4       	brne	.+6      	; 0x2136 <__mulsf3+0x4e>
    2130:	82 30       	cpi	r24, 0x02	; 2
    2132:	41 f4       	brne	.+16     	; 0x2144 <__mulsf3+0x5c>
    2134:	cb c0       	rjmp	.+406    	; 0x22cc <__mulsf3+0x1e4>
    2136:	84 30       	cpi	r24, 0x04	; 4
    2138:	19 f4       	brne	.+6      	; 0x2140 <__mulsf3+0x58>
    213a:	92 30       	cpi	r25, 0x02	; 2
    213c:	79 f4       	brne	.+30     	; 0x215c <__mulsf3+0x74>
    213e:	c6 c0       	rjmp	.+396    	; 0x22cc <__mulsf3+0x1e4>
    2140:	92 30       	cpi	r25, 0x02	; 2
    2142:	51 f4       	brne	.+20     	; 0x2158 <__mulsf3+0x70>
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	2a 85       	ldd	r18, Y+10	; 0x0a
    2148:	9a 89       	ldd	r25, Y+18	; 0x12
    214a:	29 17       	cp	r18, r25
    214c:	09 f4       	brne	.+2      	; 0x2150 <__mulsf3+0x68>
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	8a 87       	std	Y+10, r24	; 0x0a
    2152:	ce 01       	movw	r24, r28
    2154:	09 96       	adiw	r24, 0x09	; 9
    2156:	bc c0       	rjmp	.+376    	; 0x22d0 <__mulsf3+0x1e8>
    2158:	82 30       	cpi	r24, 0x02	; 2
    215a:	51 f4       	brne	.+20     	; 0x2170 <__mulsf3+0x88>
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2160:	9a 89       	ldd	r25, Y+18	; 0x12
    2162:	29 17       	cp	r18, r25
    2164:	09 f4       	brne	.+2      	; 0x2168 <__mulsf3+0x80>
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	8a 8b       	std	Y+18, r24	; 0x12
    216a:	ce 01       	movw	r24, r28
    216c:	41 96       	adiw	r24, 0x11	; 17
    216e:	b0 c0       	rjmp	.+352    	; 0x22d0 <__mulsf3+0x1e8>
    2170:	6d 84       	ldd	r6, Y+13	; 0x0d
    2172:	7e 84       	ldd	r7, Y+14	; 0x0e
    2174:	8f 84       	ldd	r8, Y+15	; 0x0f
    2176:	98 88       	ldd	r9, Y+16	; 0x10
    2178:	ed 88       	ldd	r14, Y+21	; 0x15
    217a:	fe 88       	ldd	r15, Y+22	; 0x16
    217c:	0f 89       	ldd	r16, Y+23	; 0x17
    217e:	18 8d       	ldd	r17, Y+24	; 0x18
    2180:	e0 e2       	ldi	r30, 0x20	; 32
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	dc 01       	movw	r26, r24
    218a:	aa 24       	eor	r10, r10
    218c:	bb 24       	eor	r11, r11
    218e:	65 01       	movw	r12, r10
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	a9 01       	movw	r20, r18
    2196:	b3 01       	movw	r22, r6
    2198:	61 70       	andi	r22, 0x01	; 1
    219a:	70 70       	andi	r23, 0x00	; 0
    219c:	61 15       	cp	r22, r1
    219e:	71 05       	cpc	r23, r1
    21a0:	d1 f0       	breq	.+52     	; 0x21d6 <__mulsf3+0xee>
    21a2:	2e 0d       	add	r18, r14
    21a4:	3f 1d       	adc	r19, r15
    21a6:	40 1f       	adc	r20, r16
    21a8:	51 1f       	adc	r21, r17
    21aa:	15 01       	movw	r2, r10
    21ac:	26 01       	movw	r4, r12
    21ae:	28 0e       	add	r2, r24
    21b0:	39 1e       	adc	r3, r25
    21b2:	4a 1e       	adc	r4, r26
    21b4:	5b 1e       	adc	r5, r27
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e0       	ldi	r26, 0x00	; 0
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	2e 15       	cp	r18, r14
    21c0:	3f 05       	cpc	r19, r15
    21c2:	40 07       	cpc	r20, r16
    21c4:	51 07       	cpc	r21, r17
    21c6:	18 f0       	brcs	.+6      	; 0x21ce <__mulsf3+0xe6>
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	dc 01       	movw	r26, r24
    21ce:	82 0d       	add	r24, r2
    21d0:	93 1d       	adc	r25, r3
    21d2:	a4 1d       	adc	r26, r4
    21d4:	b5 1d       	adc	r27, r5
    21d6:	aa 0c       	add	r10, r10
    21d8:	bb 1c       	adc	r11, r11
    21da:	cc 1c       	adc	r12, r12
    21dc:	dd 1c       	adc	r13, r13
    21de:	17 ff       	sbrs	r17, 7
    21e0:	09 c0       	rjmp	.+18     	; 0x21f4 <__mulsf3+0x10c>
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	26 2e       	mov	r2, r22
    21e6:	31 2c       	mov	r3, r1
    21e8:	41 2c       	mov	r4, r1
    21ea:	51 2c       	mov	r5, r1
    21ec:	a2 28       	or	r10, r2
    21ee:	b3 28       	or	r11, r3
    21f0:	c4 28       	or	r12, r4
    21f2:	d5 28       	or	r13, r5
    21f4:	31 97       	sbiw	r30, 0x01	; 1
    21f6:	49 f0       	breq	.+18     	; 0x220a <__mulsf3+0x122>
    21f8:	ee 0c       	add	r14, r14
    21fa:	ff 1c       	adc	r15, r15
    21fc:	00 1f       	adc	r16, r16
    21fe:	11 1f       	adc	r17, r17
    2200:	96 94       	lsr	r9
    2202:	87 94       	ror	r8
    2204:	77 94       	ror	r7
    2206:	67 94       	ror	r6
    2208:	c6 cf       	rjmp	.-116    	; 0x2196 <__mulsf3+0xae>
    220a:	6b 89       	ldd	r22, Y+19	; 0x13
    220c:	7c 89       	ldd	r23, Y+20	; 0x14
    220e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2210:	fc 85       	ldd	r31, Y+12	; 0x0c
    2212:	6e 0f       	add	r22, r30
    2214:	7f 1f       	adc	r23, r31
    2216:	6e 5f       	subi	r22, 0xFE	; 254
    2218:	7f 4f       	sbci	r23, 0xFF	; 255
    221a:	7c 8f       	std	Y+28, r23	; 0x1c
    221c:	6b 8f       	std	Y+27, r22	; 0x1b
    221e:	61 e0       	ldi	r22, 0x01	; 1
    2220:	ea 85       	ldd	r30, Y+10	; 0x0a
    2222:	7a 89       	ldd	r23, Y+18	; 0x12
    2224:	e7 17       	cp	r30, r23
    2226:	09 f4       	brne	.+2      	; 0x222a <__mulsf3+0x142>
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	6a 8f       	std	Y+26, r22	; 0x1a
    222c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    222e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2230:	10 c0       	rjmp	.+32     	; 0x2252 <__mulsf3+0x16a>
    2232:	fc 01       	movw	r30, r24
    2234:	e1 70       	andi	r30, 0x01	; 1
    2236:	f0 70       	andi	r31, 0x00	; 0
    2238:	30 97       	sbiw	r30, 0x00	; 0
    223a:	29 f0       	breq	.+10     	; 0x2246 <__mulsf3+0x15e>
    223c:	56 95       	lsr	r21
    223e:	47 95       	ror	r20
    2240:	37 95       	ror	r19
    2242:	27 95       	ror	r18
    2244:	50 68       	ori	r21, 0x80	; 128
    2246:	b6 95       	lsr	r27
    2248:	a7 95       	ror	r26
    224a:	97 95       	ror	r25
    224c:	87 95       	ror	r24
    224e:	6f 5f       	subi	r22, 0xFF	; 255
    2250:	7f 4f       	sbci	r23, 0xFF	; 255
    2252:	b7 fd       	sbrc	r27, 7
    2254:	ee cf       	rjmp	.-36     	; 0x2232 <__mulsf3+0x14a>
    2256:	0c c0       	rjmp	.+24     	; 0x2270 <__mulsf3+0x188>
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	aa 1f       	adc	r26, r26
    225e:	bb 1f       	adc	r27, r27
    2260:	57 fd       	sbrc	r21, 7
    2262:	81 60       	ori	r24, 0x01	; 1
    2264:	22 0f       	add	r18, r18
    2266:	33 1f       	adc	r19, r19
    2268:	44 1f       	adc	r20, r20
    226a:	55 1f       	adc	r21, r21
    226c:	61 50       	subi	r22, 0x01	; 1
    226e:	70 40       	sbci	r23, 0x00	; 0
    2270:	80 30       	cpi	r24, 0x00	; 0
    2272:	e0 e0       	ldi	r30, 0x00	; 0
    2274:	9e 07       	cpc	r25, r30
    2276:	e0 e0       	ldi	r30, 0x00	; 0
    2278:	ae 07       	cpc	r26, r30
    227a:	e0 e4       	ldi	r30, 0x40	; 64
    227c:	be 07       	cpc	r27, r30
    227e:	60 f3       	brcs	.-40     	; 0x2258 <__mulsf3+0x170>
    2280:	6b 8f       	std	Y+27, r22	; 0x1b
    2282:	7c 8f       	std	Y+28, r23	; 0x1c
    2284:	6f e7       	ldi	r22, 0x7F	; 127
    2286:	e6 2e       	mov	r14, r22
    2288:	f1 2c       	mov	r15, r1
    228a:	01 2d       	mov	r16, r1
    228c:	11 2d       	mov	r17, r1
    228e:	e8 22       	and	r14, r24
    2290:	f9 22       	and	r15, r25
    2292:	0a 23       	and	r16, r26
    2294:	1b 23       	and	r17, r27
    2296:	60 e4       	ldi	r22, 0x40	; 64
    2298:	e6 16       	cp	r14, r22
    229a:	f1 04       	cpc	r15, r1
    229c:	01 05       	cpc	r16, r1
    229e:	11 05       	cpc	r17, r1
    22a0:	61 f4       	brne	.+24     	; 0x22ba <__mulsf3+0x1d2>
    22a2:	87 fd       	sbrc	r24, 7
    22a4:	0a c0       	rjmp	.+20     	; 0x22ba <__mulsf3+0x1d2>
    22a6:	21 15       	cp	r18, r1
    22a8:	31 05       	cpc	r19, r1
    22aa:	41 05       	cpc	r20, r1
    22ac:	51 05       	cpc	r21, r1
    22ae:	29 f0       	breq	.+10     	; 0x22ba <__mulsf3+0x1d2>
    22b0:	80 5c       	subi	r24, 0xC0	; 192
    22b2:	9f 4f       	sbci	r25, 0xFF	; 255
    22b4:	af 4f       	sbci	r26, 0xFF	; 255
    22b6:	bf 4f       	sbci	r27, 0xFF	; 255
    22b8:	80 78       	andi	r24, 0x80	; 128
    22ba:	8d 8f       	std	Y+29, r24	; 0x1d
    22bc:	9e 8f       	std	Y+30, r25	; 0x1e
    22be:	af 8f       	std	Y+31, r26	; 0x1f
    22c0:	b8 a3       	std	Y+32, r27	; 0x20
    22c2:	83 e0       	ldi	r24, 0x03	; 3
    22c4:	89 8f       	std	Y+25, r24	; 0x19
    22c6:	ce 01       	movw	r24, r28
    22c8:	49 96       	adiw	r24, 0x19	; 25
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <__mulsf3+0x1e8>
    22cc:	84 eb       	ldi	r24, 0xB4	; 180
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__pack_f>
    22d4:	a0 96       	adiw	r28, 0x20	; 32
    22d6:	e2 e1       	ldi	r30, 0x12	; 18
    22d8:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__epilogue_restores__>

000022dc <__divsf3>:
    22dc:	a8 e1       	ldi	r26, 0x18	; 24
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e4 e7       	ldi	r30, 0x74	; 116
    22e2:	f1 e1       	ldi	r31, 0x11	; 17
    22e4:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x10>
    22e8:	69 83       	std	Y+1, r22	; 0x01
    22ea:	7a 83       	std	Y+2, r23	; 0x02
    22ec:	8b 83       	std	Y+3, r24	; 0x03
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	2d 83       	std	Y+5, r18	; 0x05
    22f2:	3e 83       	std	Y+6, r19	; 0x06
    22f4:	4f 83       	std	Y+7, r20	; 0x07
    22f6:	58 87       	std	Y+8, r21	; 0x08
    22f8:	8e 01       	movw	r16, r28
    22fa:	07 5f       	subi	r16, 0xF7	; 247
    22fc:	1f 4f       	sbci	r17, 0xFF	; 255
    22fe:	ce 01       	movw	r24, r28
    2300:	01 96       	adiw	r24, 0x01	; 1
    2302:	b8 01       	movw	r22, r16
    2304:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    2308:	81 e1       	ldi	r24, 0x11	; 17
    230a:	e8 2e       	mov	r14, r24
    230c:	f1 2c       	mov	r15, r1
    230e:	ec 0e       	add	r14, r28
    2310:	fd 1e       	adc	r15, r29
    2312:	ce 01       	movw	r24, r28
    2314:	05 96       	adiw	r24, 0x05	; 5
    2316:	b7 01       	movw	r22, r14
    2318:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    231c:	99 85       	ldd	r25, Y+9	; 0x09
    231e:	92 30       	cpi	r25, 0x02	; 2
    2320:	08 f4       	brcc	.+2      	; 0x2324 <__divsf3+0x48>
    2322:	83 c0       	rjmp	.+262    	; 0x242a <__divsf3+0x14e>
    2324:	89 89       	ldd	r24, Y+17	; 0x11
    2326:	82 30       	cpi	r24, 0x02	; 2
    2328:	08 f4       	brcc	.+2      	; 0x232c <__divsf3+0x50>
    232a:	7b c0       	rjmp	.+246    	; 0x2422 <__divsf3+0x146>
    232c:	2a 85       	ldd	r18, Y+10	; 0x0a
    232e:	3a 89       	ldd	r19, Y+18	; 0x12
    2330:	23 27       	eor	r18, r19
    2332:	2a 87       	std	Y+10, r18	; 0x0a
    2334:	94 30       	cpi	r25, 0x04	; 4
    2336:	11 f0       	breq	.+4      	; 0x233c <__divsf3+0x60>
    2338:	92 30       	cpi	r25, 0x02	; 2
    233a:	21 f4       	brne	.+8      	; 0x2344 <__divsf3+0x68>
    233c:	98 17       	cp	r25, r24
    233e:	09 f0       	breq	.+2      	; 0x2342 <__divsf3+0x66>
    2340:	6c c0       	rjmp	.+216    	; 0x241a <__divsf3+0x13e>
    2342:	71 c0       	rjmp	.+226    	; 0x2426 <__divsf3+0x14a>
    2344:	84 30       	cpi	r24, 0x04	; 4
    2346:	39 f4       	brne	.+14     	; 0x2356 <__divsf3+0x7a>
    2348:	1d 86       	std	Y+13, r1	; 0x0d
    234a:	1e 86       	std	Y+14, r1	; 0x0e
    234c:	1f 86       	std	Y+15, r1	; 0x0f
    234e:	18 8a       	std	Y+16, r1	; 0x10
    2350:	1c 86       	std	Y+12, r1	; 0x0c
    2352:	1b 86       	std	Y+11, r1	; 0x0b
    2354:	6a c0       	rjmp	.+212    	; 0x242a <__divsf3+0x14e>
    2356:	82 30       	cpi	r24, 0x02	; 2
    2358:	19 f4       	brne	.+6      	; 0x2360 <__divsf3+0x84>
    235a:	84 e0       	ldi	r24, 0x04	; 4
    235c:	89 87       	std	Y+9, r24	; 0x09
    235e:	65 c0       	rjmp	.+202    	; 0x242a <__divsf3+0x14e>
    2360:	8b 85       	ldd	r24, Y+11	; 0x0b
    2362:	9c 85       	ldd	r25, Y+12	; 0x0c
    2364:	2b 89       	ldd	r18, Y+19	; 0x13
    2366:	3c 89       	ldd	r19, Y+20	; 0x14
    2368:	82 1b       	sub	r24, r18
    236a:	93 0b       	sbc	r25, r19
    236c:	9c 87       	std	Y+12, r25	; 0x0c
    236e:	8b 87       	std	Y+11, r24	; 0x0b
    2370:	2d 85       	ldd	r18, Y+13	; 0x0d
    2372:	3e 85       	ldd	r19, Y+14	; 0x0e
    2374:	4f 85       	ldd	r20, Y+15	; 0x0f
    2376:	58 89       	ldd	r21, Y+16	; 0x10
    2378:	ed 88       	ldd	r14, Y+21	; 0x15
    237a:	fe 88       	ldd	r15, Y+22	; 0x16
    237c:	0f 89       	ldd	r16, Y+23	; 0x17
    237e:	18 8d       	ldd	r17, Y+24	; 0x18
    2380:	2e 15       	cp	r18, r14
    2382:	3f 05       	cpc	r19, r15
    2384:	40 07       	cpc	r20, r16
    2386:	51 07       	cpc	r21, r17
    2388:	38 f4       	brcc	.+14     	; 0x2398 <__divsf3+0xbc>
    238a:	22 0f       	add	r18, r18
    238c:	33 1f       	adc	r19, r19
    238e:	44 1f       	adc	r20, r20
    2390:	55 1f       	adc	r21, r21
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	9c 87       	std	Y+12, r25	; 0x0c
    2396:	8b 87       	std	Y+11, r24	; 0x0b
    2398:	6f e1       	ldi	r22, 0x1F	; 31
    239a:	70 e0       	ldi	r23, 0x00	; 0
    239c:	a1 2c       	mov	r10, r1
    239e:	b1 2c       	mov	r11, r1
    23a0:	c1 2c       	mov	r12, r1
    23a2:	a0 e4       	ldi	r26, 0x40	; 64
    23a4:	da 2e       	mov	r13, r26
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	dc 01       	movw	r26, r24
    23ac:	2e 15       	cp	r18, r14
    23ae:	3f 05       	cpc	r19, r15
    23b0:	40 07       	cpc	r20, r16
    23b2:	51 07       	cpc	r21, r17
    23b4:	40 f0       	brcs	.+16     	; 0x23c6 <__divsf3+0xea>
    23b6:	8a 29       	or	r24, r10
    23b8:	9b 29       	or	r25, r11
    23ba:	ac 29       	or	r26, r12
    23bc:	bd 29       	or	r27, r13
    23be:	2e 19       	sub	r18, r14
    23c0:	3f 09       	sbc	r19, r15
    23c2:	40 0b       	sbc	r20, r16
    23c4:	51 0b       	sbc	r21, r17
    23c6:	d6 94       	lsr	r13
    23c8:	c7 94       	ror	r12
    23ca:	b7 94       	ror	r11
    23cc:	a7 94       	ror	r10
    23ce:	22 0f       	add	r18, r18
    23d0:	33 1f       	adc	r19, r19
    23d2:	44 1f       	adc	r20, r20
    23d4:	55 1f       	adc	r21, r21
    23d6:	61 50       	subi	r22, 0x01	; 1
    23d8:	70 40       	sbci	r23, 0x00	; 0
    23da:	41 f7       	brne	.-48     	; 0x23ac <__divsf3+0xd0>
    23dc:	6f e7       	ldi	r22, 0x7F	; 127
    23de:	e6 2e       	mov	r14, r22
    23e0:	f1 2c       	mov	r15, r1
    23e2:	01 2d       	mov	r16, r1
    23e4:	11 2d       	mov	r17, r1
    23e6:	e8 22       	and	r14, r24
    23e8:	f9 22       	and	r15, r25
    23ea:	0a 23       	and	r16, r26
    23ec:	1b 23       	and	r17, r27
    23ee:	60 e4       	ldi	r22, 0x40	; 64
    23f0:	e6 16       	cp	r14, r22
    23f2:	f1 04       	cpc	r15, r1
    23f4:	01 05       	cpc	r16, r1
    23f6:	11 05       	cpc	r17, r1
    23f8:	61 f4       	brne	.+24     	; 0x2412 <__divsf3+0x136>
    23fa:	87 fd       	sbrc	r24, 7
    23fc:	0a c0       	rjmp	.+20     	; 0x2412 <__divsf3+0x136>
    23fe:	21 15       	cp	r18, r1
    2400:	31 05       	cpc	r19, r1
    2402:	41 05       	cpc	r20, r1
    2404:	51 05       	cpc	r21, r1
    2406:	29 f0       	breq	.+10     	; 0x2412 <__divsf3+0x136>
    2408:	80 5c       	subi	r24, 0xC0	; 192
    240a:	9f 4f       	sbci	r25, 0xFF	; 255
    240c:	af 4f       	sbci	r26, 0xFF	; 255
    240e:	bf 4f       	sbci	r27, 0xFF	; 255
    2410:	80 78       	andi	r24, 0x80	; 128
    2412:	8d 87       	std	Y+13, r24	; 0x0d
    2414:	9e 87       	std	Y+14, r25	; 0x0e
    2416:	af 87       	std	Y+15, r26	; 0x0f
    2418:	b8 8b       	std	Y+16, r27	; 0x10
    241a:	8e 01       	movw	r16, r28
    241c:	07 5f       	subi	r16, 0xF7	; 247
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	04 c0       	rjmp	.+8      	; 0x242a <__divsf3+0x14e>
    2422:	87 01       	movw	r16, r14
    2424:	02 c0       	rjmp	.+4      	; 0x242a <__divsf3+0x14e>
    2426:	04 eb       	ldi	r16, 0xB4	; 180
    2428:	10 e0       	ldi	r17, 0x00	; 0
    242a:	c8 01       	movw	r24, r16
    242c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__pack_f>
    2430:	68 96       	adiw	r28, 0x18	; 24
    2432:	ea e0       	ldi	r30, 0x0A	; 10
    2434:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x10>

00002438 <__gtsf2>:
    2438:	a8 e1       	ldi	r26, 0x18	; 24
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e2 e2       	ldi	r30, 0x22	; 34
    243e:	f2 e1       	ldi	r31, 0x12	; 18
    2440:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__+0x18>
    2444:	69 83       	std	Y+1, r22	; 0x01
    2446:	7a 83       	std	Y+2, r23	; 0x02
    2448:	8b 83       	std	Y+3, r24	; 0x03
    244a:	9c 83       	std	Y+4, r25	; 0x04
    244c:	2d 83       	std	Y+5, r18	; 0x05
    244e:	3e 83       	std	Y+6, r19	; 0x06
    2450:	4f 83       	std	Y+7, r20	; 0x07
    2452:	58 87       	std	Y+8, r21	; 0x08
    2454:	8e 01       	movw	r16, r28
    2456:	07 5f       	subi	r16, 0xF7	; 247
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	ce 01       	movw	r24, r28
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	b8 01       	movw	r22, r16
    2460:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    2464:	81 e1       	ldi	r24, 0x11	; 17
    2466:	e8 2e       	mov	r14, r24
    2468:	f1 2c       	mov	r15, r1
    246a:	ec 0e       	add	r14, r28
    246c:	fd 1e       	adc	r15, r29
    246e:	ce 01       	movw	r24, r28
    2470:	05 96       	adiw	r24, 0x05	; 5
    2472:	b7 01       	movw	r22, r14
    2474:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    2478:	89 85       	ldd	r24, Y+9	; 0x09
    247a:	82 30       	cpi	r24, 0x02	; 2
    247c:	40 f0       	brcs	.+16     	; 0x248e <__gtsf2+0x56>
    247e:	89 89       	ldd	r24, Y+17	; 0x11
    2480:	82 30       	cpi	r24, 0x02	; 2
    2482:	28 f0       	brcs	.+10     	; 0x248e <__gtsf2+0x56>
    2484:	c8 01       	movw	r24, r16
    2486:	b7 01       	movw	r22, r14
    2488:	0e 94 35 14 	call	0x286a	; 0x286a <__fpcmp_parts_f>
    248c:	01 c0       	rjmp	.+2      	; 0x2490 <__gtsf2+0x58>
    248e:	8f ef       	ldi	r24, 0xFF	; 255
    2490:	68 96       	adiw	r28, 0x18	; 24
    2492:	e6 e0       	ldi	r30, 0x06	; 6
    2494:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__+0x18>

00002498 <__gesf2>:
    2498:	a8 e1       	ldi	r26, 0x18	; 24
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e2 e5       	ldi	r30, 0x52	; 82
    249e:	f2 e1       	ldi	r31, 0x12	; 18
    24a0:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__+0x18>
    24a4:	69 83       	std	Y+1, r22	; 0x01
    24a6:	7a 83       	std	Y+2, r23	; 0x02
    24a8:	8b 83       	std	Y+3, r24	; 0x03
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	2d 83       	std	Y+5, r18	; 0x05
    24ae:	3e 83       	std	Y+6, r19	; 0x06
    24b0:	4f 83       	std	Y+7, r20	; 0x07
    24b2:	58 87       	std	Y+8, r21	; 0x08
    24b4:	8e 01       	movw	r16, r28
    24b6:	07 5f       	subi	r16, 0xF7	; 247
    24b8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ba:	ce 01       	movw	r24, r28
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	b8 01       	movw	r22, r16
    24c0:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    24c4:	81 e1       	ldi	r24, 0x11	; 17
    24c6:	e8 2e       	mov	r14, r24
    24c8:	f1 2c       	mov	r15, r1
    24ca:	ec 0e       	add	r14, r28
    24cc:	fd 1e       	adc	r15, r29
    24ce:	ce 01       	movw	r24, r28
    24d0:	05 96       	adiw	r24, 0x05	; 5
    24d2:	b7 01       	movw	r22, r14
    24d4:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    24d8:	89 85       	ldd	r24, Y+9	; 0x09
    24da:	82 30       	cpi	r24, 0x02	; 2
    24dc:	40 f0       	brcs	.+16     	; 0x24ee <__gesf2+0x56>
    24de:	89 89       	ldd	r24, Y+17	; 0x11
    24e0:	82 30       	cpi	r24, 0x02	; 2
    24e2:	28 f0       	brcs	.+10     	; 0x24ee <__gesf2+0x56>
    24e4:	c8 01       	movw	r24, r16
    24e6:	b7 01       	movw	r22, r14
    24e8:	0e 94 35 14 	call	0x286a	; 0x286a <__fpcmp_parts_f>
    24ec:	01 c0       	rjmp	.+2      	; 0x24f0 <__gesf2+0x58>
    24ee:	8f ef       	ldi	r24, 0xFF	; 255
    24f0:	68 96       	adiw	r28, 0x18	; 24
    24f2:	e6 e0       	ldi	r30, 0x06	; 6
    24f4:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__+0x18>

000024f8 <__ltsf2>:
    24f8:	a8 e1       	ldi	r26, 0x18	; 24
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e2 e8       	ldi	r30, 0x82	; 130
    24fe:	f2 e1       	ldi	r31, 0x12	; 18
    2500:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__+0x18>
    2504:	69 83       	std	Y+1, r22	; 0x01
    2506:	7a 83       	std	Y+2, r23	; 0x02
    2508:	8b 83       	std	Y+3, r24	; 0x03
    250a:	9c 83       	std	Y+4, r25	; 0x04
    250c:	2d 83       	std	Y+5, r18	; 0x05
    250e:	3e 83       	std	Y+6, r19	; 0x06
    2510:	4f 83       	std	Y+7, r20	; 0x07
    2512:	58 87       	std	Y+8, r21	; 0x08
    2514:	8e 01       	movw	r16, r28
    2516:	07 5f       	subi	r16, 0xF7	; 247
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	ce 01       	movw	r24, r28
    251c:	01 96       	adiw	r24, 0x01	; 1
    251e:	b8 01       	movw	r22, r16
    2520:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    2524:	81 e1       	ldi	r24, 0x11	; 17
    2526:	e8 2e       	mov	r14, r24
    2528:	f1 2c       	mov	r15, r1
    252a:	ec 0e       	add	r14, r28
    252c:	fd 1e       	adc	r15, r29
    252e:	ce 01       	movw	r24, r28
    2530:	05 96       	adiw	r24, 0x05	; 5
    2532:	b7 01       	movw	r22, r14
    2534:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	82 30       	cpi	r24, 0x02	; 2
    253c:	40 f0       	brcs	.+16     	; 0x254e <__ltsf2+0x56>
    253e:	89 89       	ldd	r24, Y+17	; 0x11
    2540:	82 30       	cpi	r24, 0x02	; 2
    2542:	28 f0       	brcs	.+10     	; 0x254e <__ltsf2+0x56>
    2544:	c8 01       	movw	r24, r16
    2546:	b7 01       	movw	r22, r14
    2548:	0e 94 35 14 	call	0x286a	; 0x286a <__fpcmp_parts_f>
    254c:	01 c0       	rjmp	.+2      	; 0x2550 <__ltsf2+0x58>
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	68 96       	adiw	r28, 0x18	; 24
    2552:	e6 e0       	ldi	r30, 0x06	; 6
    2554:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__+0x18>

00002558 <__fixsfsi>:
    2558:	ac e0       	ldi	r26, 0x0C	; 12
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e2 eb       	ldi	r30, 0xB2	; 178
    255e:	f2 e1       	ldi	r31, 0x12	; 18
    2560:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__prologue_saves__+0x20>
    2564:	69 83       	std	Y+1, r22	; 0x01
    2566:	7a 83       	std	Y+2, r23	; 0x02
    2568:	8b 83       	std	Y+3, r24	; 0x03
    256a:	9c 83       	std	Y+4, r25	; 0x04
    256c:	ce 01       	movw	r24, r28
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	be 01       	movw	r22, r28
    2572:	6b 5f       	subi	r22, 0xFB	; 251
    2574:	7f 4f       	sbci	r23, 0xFF	; 255
    2576:	0e 94 cc 13 	call	0x2798	; 0x2798 <__unpack_f>
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	82 30       	cpi	r24, 0x02	; 2
    257e:	81 f1       	breq	.+96     	; 0x25e0 <__fixsfsi+0x88>
    2580:	82 30       	cpi	r24, 0x02	; 2
    2582:	70 f1       	brcs	.+92     	; 0x25e0 <__fixsfsi+0x88>
    2584:	84 30       	cpi	r24, 0x04	; 4
    2586:	21 f4       	brne	.+8      	; 0x2590 <__fixsfsi+0x38>
    2588:	8e 81       	ldd	r24, Y+6	; 0x06
    258a:	88 23       	and	r24, r24
    258c:	69 f1       	breq	.+90     	; 0x25e8 <__fixsfsi+0x90>
    258e:	0a c0       	rjmp	.+20     	; 0x25a4 <__fixsfsi+0x4c>
    2590:	2f 81       	ldd	r18, Y+7	; 0x07
    2592:	38 85       	ldd	r19, Y+8	; 0x08
    2594:	37 fd       	sbrc	r19, 7
    2596:	24 c0       	rjmp	.+72     	; 0x25e0 <__fixsfsi+0x88>
    2598:	6e 81       	ldd	r22, Y+6	; 0x06
    259a:	2f 31       	cpi	r18, 0x1F	; 31
    259c:	31 05       	cpc	r19, r1
    259e:	3c f0       	brlt	.+14     	; 0x25ae <__fixsfsi+0x56>
    25a0:	66 23       	and	r22, r22
    25a2:	11 f1       	breq	.+68     	; 0x25e8 <__fixsfsi+0x90>
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	50 e8       	ldi	r21, 0x80	; 128
    25ac:	21 c0       	rjmp	.+66     	; 0x25f0 <__fixsfsi+0x98>
    25ae:	8e e1       	ldi	r24, 0x1E	; 30
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	82 1b       	sub	r24, r18
    25b4:	93 0b       	sbc	r25, r19
    25b6:	29 85       	ldd	r18, Y+9	; 0x09
    25b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    25ba:	4b 85       	ldd	r20, Y+11	; 0x0b
    25bc:	5c 85       	ldd	r21, Y+12	; 0x0c
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <__fixsfsi+0x70>
    25c0:	56 95       	lsr	r21
    25c2:	47 95       	ror	r20
    25c4:	37 95       	ror	r19
    25c6:	27 95       	ror	r18
    25c8:	8a 95       	dec	r24
    25ca:	d2 f7       	brpl	.-12     	; 0x25c0 <__fixsfsi+0x68>
    25cc:	66 23       	and	r22, r22
    25ce:	81 f0       	breq	.+32     	; 0x25f0 <__fixsfsi+0x98>
    25d0:	50 95       	com	r21
    25d2:	40 95       	com	r20
    25d4:	30 95       	com	r19
    25d6:	21 95       	neg	r18
    25d8:	3f 4f       	sbci	r19, 0xFF	; 255
    25da:	4f 4f       	sbci	r20, 0xFF	; 255
    25dc:	5f 4f       	sbci	r21, 0xFF	; 255
    25de:	08 c0       	rjmp	.+16     	; 0x25f0 <__fixsfsi+0x98>
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	a9 01       	movw	r20, r18
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <__fixsfsi+0x98>
    25e8:	2f ef       	ldi	r18, 0xFF	; 255
    25ea:	3f ef       	ldi	r19, 0xFF	; 255
    25ec:	4f ef       	ldi	r20, 0xFF	; 255
    25ee:	5f e7       	ldi	r21, 0x7F	; 127
    25f0:	b9 01       	movw	r22, r18
    25f2:	ca 01       	movw	r24, r20
    25f4:	2c 96       	adiw	r28, 0x0c	; 12
    25f6:	e2 e0       	ldi	r30, 0x02	; 2
    25f8:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__epilogue_restores__+0x20>

000025fc <__pack_f>:
    25fc:	ef 92       	push	r14
    25fe:	ff 92       	push	r15
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	fc 01       	movw	r30, r24
    260a:	24 81       	ldd	r18, Z+4	; 0x04
    260c:	35 81       	ldd	r19, Z+5	; 0x05
    260e:	46 81       	ldd	r20, Z+6	; 0x06
    2610:	57 81       	ldd	r21, Z+7	; 0x07
    2612:	61 81       	ldd	r22, Z+1	; 0x01
    2614:	80 81       	ld	r24, Z
    2616:	82 30       	cpi	r24, 0x02	; 2
    2618:	20 f4       	brcc	.+8      	; 0x2622 <__pack_f+0x26>
    261a:	40 61       	ori	r20, 0x10	; 16
    261c:	ef ef       	ldi	r30, 0xFF	; 255
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	a3 c0       	rjmp	.+326    	; 0x2768 <__pack_f+0x16c>
    2622:	84 30       	cpi	r24, 0x04	; 4
    2624:	09 f4       	brne	.+2      	; 0x2628 <__pack_f+0x2c>
    2626:	9b c0       	rjmp	.+310    	; 0x275e <__pack_f+0x162>
    2628:	82 30       	cpi	r24, 0x02	; 2
    262a:	09 f4       	brne	.+2      	; 0x262e <__pack_f+0x32>
    262c:	92 c0       	rjmp	.+292    	; 0x2752 <__pack_f+0x156>
    262e:	21 15       	cp	r18, r1
    2630:	31 05       	cpc	r19, r1
    2632:	41 05       	cpc	r20, r1
    2634:	51 05       	cpc	r21, r1
    2636:	09 f4       	brne	.+2      	; 0x263a <__pack_f+0x3e>
    2638:	8f c0       	rjmp	.+286    	; 0x2758 <__pack_f+0x15c>
    263a:	02 80       	ldd	r0, Z+2	; 0x02
    263c:	f3 81       	ldd	r31, Z+3	; 0x03
    263e:	e0 2d       	mov	r30, r0
    2640:	8f ef       	ldi	r24, 0xFF	; 255
    2642:	e2 38       	cpi	r30, 0x82	; 130
    2644:	f8 07       	cpc	r31, r24
    2646:	0c f0       	brlt	.+2      	; 0x264a <__pack_f+0x4e>
    2648:	5a c0       	rjmp	.+180    	; 0x26fe <__pack_f+0x102>
    264a:	c2 e8       	ldi	r28, 0x82	; 130
    264c:	df ef       	ldi	r29, 0xFF	; 255
    264e:	ce 1b       	sub	r28, r30
    2650:	df 0b       	sbc	r29, r31
    2652:	ca 31       	cpi	r28, 0x1A	; 26
    2654:	d1 05       	cpc	r29, r1
    2656:	6c f5       	brge	.+90     	; 0x26b2 <__pack_f+0xb6>
    2658:	79 01       	movw	r14, r18
    265a:	8a 01       	movw	r16, r20
    265c:	0c 2e       	mov	r0, r28
    265e:	04 c0       	rjmp	.+8      	; 0x2668 <__pack_f+0x6c>
    2660:	16 95       	lsr	r17
    2662:	07 95       	ror	r16
    2664:	f7 94       	ror	r15
    2666:	e7 94       	ror	r14
    2668:	0a 94       	dec	r0
    266a:	d2 f7       	brpl	.-12     	; 0x2660 <__pack_f+0x64>
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	a0 e0       	ldi	r26, 0x00	; 0
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	0c 2e       	mov	r0, r28
    2676:	04 c0       	rjmp	.+8      	; 0x2680 <__pack_f+0x84>
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	aa 1f       	adc	r26, r26
    267e:	bb 1f       	adc	r27, r27
    2680:	0a 94       	dec	r0
    2682:	d2 f7       	brpl	.-12     	; 0x2678 <__pack_f+0x7c>
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	a1 09       	sbc	r26, r1
    2688:	b1 09       	sbc	r27, r1
    268a:	82 23       	and	r24, r18
    268c:	93 23       	and	r25, r19
    268e:	a4 23       	and	r26, r20
    2690:	b5 23       	and	r27, r21
    2692:	21 e0       	ldi	r18, 0x01	; 1
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	a1 05       	cpc	r26, r1
    269e:	b1 05       	cpc	r27, r1
    26a0:	19 f4       	brne	.+6      	; 0x26a8 <__pack_f+0xac>
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	a9 01       	movw	r20, r18
    26a8:	2e 29       	or	r18, r14
    26aa:	3f 29       	or	r19, r15
    26ac:	40 2b       	or	r20, r16
    26ae:	51 2b       	or	r21, r17
    26b0:	03 c0       	rjmp	.+6      	; 0x26b8 <__pack_f+0xbc>
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	a9 01       	movw	r20, r18
    26b8:	da 01       	movw	r26, r20
    26ba:	c9 01       	movw	r24, r18
    26bc:	8f 77       	andi	r24, 0x7F	; 127
    26be:	90 70       	andi	r25, 0x00	; 0
    26c0:	a0 70       	andi	r26, 0x00	; 0
    26c2:	b0 70       	andi	r27, 0x00	; 0
    26c4:	80 34       	cpi	r24, 0x40	; 64
    26c6:	91 05       	cpc	r25, r1
    26c8:	a1 05       	cpc	r26, r1
    26ca:	b1 05       	cpc	r27, r1
    26cc:	39 f4       	brne	.+14     	; 0x26dc <__pack_f+0xe0>
    26ce:	27 ff       	sbrs	r18, 7
    26d0:	09 c0       	rjmp	.+18     	; 0x26e4 <__pack_f+0xe8>
    26d2:	20 5c       	subi	r18, 0xC0	; 192
    26d4:	3f 4f       	sbci	r19, 0xFF	; 255
    26d6:	4f 4f       	sbci	r20, 0xFF	; 255
    26d8:	5f 4f       	sbci	r21, 0xFF	; 255
    26da:	04 c0       	rjmp	.+8      	; 0x26e4 <__pack_f+0xe8>
    26dc:	21 5c       	subi	r18, 0xC1	; 193
    26de:	3f 4f       	sbci	r19, 0xFF	; 255
    26e0:	4f 4f       	sbci	r20, 0xFF	; 255
    26e2:	5f 4f       	sbci	r21, 0xFF	; 255
    26e4:	e1 e0       	ldi	r30, 0x01	; 1
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	20 30       	cpi	r18, 0x00	; 0
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	38 07       	cpc	r19, r24
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	48 07       	cpc	r20, r24
    26f2:	80 e4       	ldi	r24, 0x40	; 64
    26f4:	58 07       	cpc	r21, r24
    26f6:	28 f5       	brcc	.+74     	; 0x2742 <__pack_f+0x146>
    26f8:	e0 e0       	ldi	r30, 0x00	; 0
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	22 c0       	rjmp	.+68     	; 0x2742 <__pack_f+0x146>
    26fe:	e0 38       	cpi	r30, 0x80	; 128
    2700:	f1 05       	cpc	r31, r1
    2702:	6c f5       	brge	.+90     	; 0x275e <__pack_f+0x162>
    2704:	e1 58       	subi	r30, 0x81	; 129
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	da 01       	movw	r26, r20
    270a:	c9 01       	movw	r24, r18
    270c:	8f 77       	andi	r24, 0x7F	; 127
    270e:	90 70       	andi	r25, 0x00	; 0
    2710:	a0 70       	andi	r26, 0x00	; 0
    2712:	b0 70       	andi	r27, 0x00	; 0
    2714:	80 34       	cpi	r24, 0x40	; 64
    2716:	91 05       	cpc	r25, r1
    2718:	a1 05       	cpc	r26, r1
    271a:	b1 05       	cpc	r27, r1
    271c:	39 f4       	brne	.+14     	; 0x272c <__pack_f+0x130>
    271e:	27 ff       	sbrs	r18, 7
    2720:	09 c0       	rjmp	.+18     	; 0x2734 <__pack_f+0x138>
    2722:	20 5c       	subi	r18, 0xC0	; 192
    2724:	3f 4f       	sbci	r19, 0xFF	; 255
    2726:	4f 4f       	sbci	r20, 0xFF	; 255
    2728:	5f 4f       	sbci	r21, 0xFF	; 255
    272a:	04 c0       	rjmp	.+8      	; 0x2734 <__pack_f+0x138>
    272c:	21 5c       	subi	r18, 0xC1	; 193
    272e:	3f 4f       	sbci	r19, 0xFF	; 255
    2730:	4f 4f       	sbci	r20, 0xFF	; 255
    2732:	5f 4f       	sbci	r21, 0xFF	; 255
    2734:	57 ff       	sbrs	r21, 7
    2736:	05 c0       	rjmp	.+10     	; 0x2742 <__pack_f+0x146>
    2738:	56 95       	lsr	r21
    273a:	47 95       	ror	r20
    273c:	37 95       	ror	r19
    273e:	27 95       	ror	r18
    2740:	31 96       	adiw	r30, 0x01	; 1
    2742:	87 e0       	ldi	r24, 0x07	; 7
    2744:	56 95       	lsr	r21
    2746:	47 95       	ror	r20
    2748:	37 95       	ror	r19
    274a:	27 95       	ror	r18
    274c:	8a 95       	dec	r24
    274e:	d1 f7       	brne	.-12     	; 0x2744 <__pack_f+0x148>
    2750:	0b c0       	rjmp	.+22     	; 0x2768 <__pack_f+0x16c>
    2752:	e0 e0       	ldi	r30, 0x00	; 0
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	05 c0       	rjmp	.+10     	; 0x2762 <__pack_f+0x166>
    2758:	e0 e0       	ldi	r30, 0x00	; 0
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	05 c0       	rjmp	.+10     	; 0x2768 <__pack_f+0x16c>
    275e:	ef ef       	ldi	r30, 0xFF	; 255
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	a9 01       	movw	r20, r18
    2768:	8e 2f       	mov	r24, r30
    276a:	87 95       	ror	r24
    276c:	88 27       	eor	r24, r24
    276e:	87 95       	ror	r24
    2770:	94 2f       	mov	r25, r20
    2772:	9f 77       	andi	r25, 0x7F	; 127
    2774:	67 95       	ror	r22
    2776:	66 27       	eor	r22, r22
    2778:	67 95       	ror	r22
    277a:	e6 95       	lsr	r30
    277c:	e2 2e       	mov	r14, r18
    277e:	a9 2f       	mov	r26, r25
    2780:	a8 2b       	or	r26, r24
    2782:	fe 2f       	mov	r31, r30
    2784:	f6 2b       	or	r31, r22
    2786:	62 2f       	mov	r22, r18
    2788:	73 2f       	mov	r23, r19
    278a:	8a 2f       	mov	r24, r26
    278c:	9f 2f       	mov	r25, r31
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	e6 e0       	ldi	r30, 0x06	; 6
    2794:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__+0x18>

00002798 <__unpack_f>:
    2798:	dc 01       	movw	r26, r24
    279a:	fb 01       	movw	r30, r22
    279c:	2c 91       	ld	r18, X
    279e:	11 96       	adiw	r26, 0x01	; 1
    27a0:	3c 91       	ld	r19, X
    27a2:	11 97       	sbiw	r26, 0x01	; 1
    27a4:	12 96       	adiw	r26, 0x02	; 2
    27a6:	8c 91       	ld	r24, X
    27a8:	12 97       	sbiw	r26, 0x02	; 2
    27aa:	48 2f       	mov	r20, r24
    27ac:	4f 77       	andi	r20, 0x7F	; 127
    27ae:	50 e0       	ldi	r21, 0x00	; 0
    27b0:	98 2f       	mov	r25, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	99 27       	eor	r25, r25
    27b6:	99 1f       	adc	r25, r25
    27b8:	13 96       	adiw	r26, 0x03	; 3
    27ba:	6c 91       	ld	r22, X
    27bc:	13 97       	sbiw	r26, 0x03	; 3
    27be:	86 2f       	mov	r24, r22
    27c0:	88 0f       	add	r24, r24
    27c2:	89 2b       	or	r24, r25
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	66 1f       	adc	r22, r22
    27c8:	66 27       	eor	r22, r22
    27ca:	66 1f       	adc	r22, r22
    27cc:	61 83       	std	Z+1, r22	; 0x01
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	39 f5       	brne	.+78     	; 0x2820 <__unpack_f+0x88>
    27d2:	21 15       	cp	r18, r1
    27d4:	31 05       	cpc	r19, r1
    27d6:	41 05       	cpc	r20, r1
    27d8:	51 05       	cpc	r21, r1
    27da:	11 f4       	brne	.+4      	; 0x27e0 <__unpack_f+0x48>
    27dc:	82 e0       	ldi	r24, 0x02	; 2
    27de:	29 c0       	rjmp	.+82     	; 0x2832 <__unpack_f+0x9a>
    27e0:	82 e8       	ldi	r24, 0x82	; 130
    27e2:	9f ef       	ldi	r25, 0xFF	; 255
    27e4:	93 83       	std	Z+3, r25	; 0x03
    27e6:	82 83       	std	Z+2, r24	; 0x02
    27e8:	67 e0       	ldi	r22, 0x07	; 7
    27ea:	22 0f       	add	r18, r18
    27ec:	33 1f       	adc	r19, r19
    27ee:	44 1f       	adc	r20, r20
    27f0:	55 1f       	adc	r21, r21
    27f2:	6a 95       	dec	r22
    27f4:	d1 f7       	brne	.-12     	; 0x27ea <__unpack_f+0x52>
    27f6:	83 e0       	ldi	r24, 0x03	; 3
    27f8:	80 83       	st	Z, r24
    27fa:	09 c0       	rjmp	.+18     	; 0x280e <__unpack_f+0x76>
    27fc:	22 0f       	add	r18, r18
    27fe:	33 1f       	adc	r19, r19
    2800:	44 1f       	adc	r20, r20
    2802:	55 1f       	adc	r21, r21
    2804:	82 81       	ldd	r24, Z+2	; 0x02
    2806:	93 81       	ldd	r25, Z+3	; 0x03
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	93 83       	std	Z+3, r25	; 0x03
    280c:	82 83       	std	Z+2, r24	; 0x02
    280e:	20 30       	cpi	r18, 0x00	; 0
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	38 07       	cpc	r19, r24
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	48 07       	cpc	r20, r24
    2818:	80 e4       	ldi	r24, 0x40	; 64
    281a:	58 07       	cpc	r21, r24
    281c:	78 f3       	brcs	.-34     	; 0x27fc <__unpack_f+0x64>
    281e:	20 c0       	rjmp	.+64     	; 0x2860 <__unpack_f+0xc8>
    2820:	8f 3f       	cpi	r24, 0xFF	; 255
    2822:	91 05       	cpc	r25, r1
    2824:	79 f4       	brne	.+30     	; 0x2844 <__unpack_f+0xac>
    2826:	21 15       	cp	r18, r1
    2828:	31 05       	cpc	r19, r1
    282a:	41 05       	cpc	r20, r1
    282c:	51 05       	cpc	r21, r1
    282e:	19 f4       	brne	.+6      	; 0x2836 <__unpack_f+0x9e>
    2830:	84 e0       	ldi	r24, 0x04	; 4
    2832:	80 83       	st	Z, r24
    2834:	08 95       	ret
    2836:	44 ff       	sbrs	r20, 4
    2838:	03 c0       	rjmp	.+6      	; 0x2840 <__unpack_f+0xa8>
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	80 83       	st	Z, r24
    283e:	10 c0       	rjmp	.+32     	; 0x2860 <__unpack_f+0xc8>
    2840:	10 82       	st	Z, r1
    2842:	0e c0       	rjmp	.+28     	; 0x2860 <__unpack_f+0xc8>
    2844:	8f 57       	subi	r24, 0x7F	; 127
    2846:	90 40       	sbci	r25, 0x00	; 0
    2848:	93 83       	std	Z+3, r25	; 0x03
    284a:	82 83       	std	Z+2, r24	; 0x02
    284c:	83 e0       	ldi	r24, 0x03	; 3
    284e:	80 83       	st	Z, r24
    2850:	87 e0       	ldi	r24, 0x07	; 7
    2852:	22 0f       	add	r18, r18
    2854:	33 1f       	adc	r19, r19
    2856:	44 1f       	adc	r20, r20
    2858:	55 1f       	adc	r21, r21
    285a:	8a 95       	dec	r24
    285c:	d1 f7       	brne	.-12     	; 0x2852 <__unpack_f+0xba>
    285e:	50 64       	ori	r21, 0x40	; 64
    2860:	24 83       	std	Z+4, r18	; 0x04
    2862:	35 83       	std	Z+5, r19	; 0x05
    2864:	46 83       	std	Z+6, r20	; 0x06
    2866:	57 83       	std	Z+7, r21	; 0x07
    2868:	08 95       	ret

0000286a <__fpcmp_parts_f>:
    286a:	fc 01       	movw	r30, r24
    286c:	db 01       	movw	r26, r22
    286e:	90 81       	ld	r25, Z
    2870:	92 30       	cpi	r25, 0x02	; 2
    2872:	08 f4       	brcc	.+2      	; 0x2876 <__fpcmp_parts_f+0xc>
    2874:	49 c0       	rjmp	.+146    	; 0x2908 <__fpcmp_parts_f+0x9e>
    2876:	8c 91       	ld	r24, X
    2878:	82 30       	cpi	r24, 0x02	; 2
    287a:	08 f4       	brcc	.+2      	; 0x287e <__fpcmp_parts_f+0x14>
    287c:	45 c0       	rjmp	.+138    	; 0x2908 <__fpcmp_parts_f+0x9e>
    287e:	94 30       	cpi	r25, 0x04	; 4
    2880:	51 f4       	brne	.+20     	; 0x2896 <__fpcmp_parts_f+0x2c>
    2882:	61 81       	ldd	r22, Z+1	; 0x01
    2884:	84 30       	cpi	r24, 0x04	; 4
    2886:	b1 f5       	brne	.+108    	; 0x28f4 <__fpcmp_parts_f+0x8a>
    2888:	11 96       	adiw	r26, 0x01	; 1
    288a:	2c 91       	ld	r18, X
    288c:	11 97       	sbiw	r26, 0x01	; 1
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	26 1b       	sub	r18, r22
    2892:	31 09       	sbc	r19, r1
    2894:	41 c0       	rjmp	.+130    	; 0x2918 <__fpcmp_parts_f+0xae>
    2896:	84 30       	cpi	r24, 0x04	; 4
    2898:	21 f0       	breq	.+8      	; 0x28a2 <__fpcmp_parts_f+0x38>
    289a:	92 30       	cpi	r25, 0x02	; 2
    289c:	41 f4       	brne	.+16     	; 0x28ae <__fpcmp_parts_f+0x44>
    289e:	82 30       	cpi	r24, 0x02	; 2
    28a0:	b1 f1       	breq	.+108    	; 0x290e <__fpcmp_parts_f+0xa4>
    28a2:	11 96       	adiw	r26, 0x01	; 1
    28a4:	8c 91       	ld	r24, X
    28a6:	11 97       	sbiw	r26, 0x01	; 1
    28a8:	88 23       	and	r24, r24
    28aa:	a1 f1       	breq	.+104    	; 0x2914 <__fpcmp_parts_f+0xaa>
    28ac:	2d c0       	rjmp	.+90     	; 0x2908 <__fpcmp_parts_f+0x9e>
    28ae:	61 81       	ldd	r22, Z+1	; 0x01
    28b0:	82 30       	cpi	r24, 0x02	; 2
    28b2:	01 f1       	breq	.+64     	; 0x28f4 <__fpcmp_parts_f+0x8a>
    28b4:	11 96       	adiw	r26, 0x01	; 1
    28b6:	8c 91       	ld	r24, X
    28b8:	11 97       	sbiw	r26, 0x01	; 1
    28ba:	68 17       	cp	r22, r24
    28bc:	d9 f4       	brne	.+54     	; 0x28f4 <__fpcmp_parts_f+0x8a>
    28be:	22 81       	ldd	r18, Z+2	; 0x02
    28c0:	33 81       	ldd	r19, Z+3	; 0x03
    28c2:	12 96       	adiw	r26, 0x02	; 2
    28c4:	8d 91       	ld	r24, X+
    28c6:	9c 91       	ld	r25, X
    28c8:	13 97       	sbiw	r26, 0x03	; 3
    28ca:	82 17       	cp	r24, r18
    28cc:	93 07       	cpc	r25, r19
    28ce:	94 f0       	brlt	.+36     	; 0x28f4 <__fpcmp_parts_f+0x8a>
    28d0:	28 17       	cp	r18, r24
    28d2:	39 07       	cpc	r19, r25
    28d4:	bc f0       	brlt	.+46     	; 0x2904 <__fpcmp_parts_f+0x9a>
    28d6:	24 81       	ldd	r18, Z+4	; 0x04
    28d8:	35 81       	ldd	r19, Z+5	; 0x05
    28da:	46 81       	ldd	r20, Z+6	; 0x06
    28dc:	57 81       	ldd	r21, Z+7	; 0x07
    28de:	14 96       	adiw	r26, 0x04	; 4
    28e0:	8d 91       	ld	r24, X+
    28e2:	9d 91       	ld	r25, X+
    28e4:	0d 90       	ld	r0, X+
    28e6:	bc 91       	ld	r27, X
    28e8:	a0 2d       	mov	r26, r0
    28ea:	82 17       	cp	r24, r18
    28ec:	93 07       	cpc	r25, r19
    28ee:	a4 07       	cpc	r26, r20
    28f0:	b5 07       	cpc	r27, r21
    28f2:	18 f4       	brcc	.+6      	; 0x28fa <__fpcmp_parts_f+0x90>
    28f4:	66 23       	and	r22, r22
    28f6:	41 f0       	breq	.+16     	; 0x2908 <__fpcmp_parts_f+0x9e>
    28f8:	0d c0       	rjmp	.+26     	; 0x2914 <__fpcmp_parts_f+0xaa>
    28fa:	28 17       	cp	r18, r24
    28fc:	39 07       	cpc	r19, r25
    28fe:	4a 07       	cpc	r20, r26
    2900:	5b 07       	cpc	r21, r27
    2902:	28 f4       	brcc	.+10     	; 0x290e <__fpcmp_parts_f+0xa4>
    2904:	66 23       	and	r22, r22
    2906:	31 f0       	breq	.+12     	; 0x2914 <__fpcmp_parts_f+0xaa>
    2908:	21 e0       	ldi	r18, 0x01	; 1
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	05 c0       	rjmp	.+10     	; 0x2918 <__fpcmp_parts_f+0xae>
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <__fpcmp_parts_f+0xae>
    2914:	2f ef       	ldi	r18, 0xFF	; 255
    2916:	3f ef       	ldi	r19, 0xFF	; 255
    2918:	c9 01       	movw	r24, r18
    291a:	08 95       	ret

0000291c <__prologue_saves__>:
    291c:	2f 92       	push	r2
    291e:	3f 92       	push	r3
    2920:	4f 92       	push	r4
    2922:	5f 92       	push	r5
    2924:	6f 92       	push	r6
    2926:	7f 92       	push	r7
    2928:	8f 92       	push	r8
    292a:	9f 92       	push	r9
    292c:	af 92       	push	r10
    292e:	bf 92       	push	r11
    2930:	cf 92       	push	r12
    2932:	df 92       	push	r13
    2934:	ef 92       	push	r14
    2936:	ff 92       	push	r15
    2938:	0f 93       	push	r16
    293a:	1f 93       	push	r17
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	ca 1b       	sub	r28, r26
    2946:	db 0b       	sbc	r29, r27
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	09 94       	ijmp

00002954 <__epilogue_restores__>:
    2954:	2a 88       	ldd	r2, Y+18	; 0x12
    2956:	39 88       	ldd	r3, Y+17	; 0x11
    2958:	48 88       	ldd	r4, Y+16	; 0x10
    295a:	5f 84       	ldd	r5, Y+15	; 0x0f
    295c:	6e 84       	ldd	r6, Y+14	; 0x0e
    295e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2960:	8c 84       	ldd	r8, Y+12	; 0x0c
    2962:	9b 84       	ldd	r9, Y+11	; 0x0b
    2964:	aa 84       	ldd	r10, Y+10	; 0x0a
    2966:	b9 84       	ldd	r11, Y+9	; 0x09
    2968:	c8 84       	ldd	r12, Y+8	; 0x08
    296a:	df 80       	ldd	r13, Y+7	; 0x07
    296c:	ee 80       	ldd	r14, Y+6	; 0x06
    296e:	fd 80       	ldd	r15, Y+5	; 0x05
    2970:	0c 81       	ldd	r16, Y+4	; 0x04
    2972:	1b 81       	ldd	r17, Y+3	; 0x03
    2974:	aa 81       	ldd	r26, Y+2	; 0x02
    2976:	b9 81       	ldd	r27, Y+1	; 0x01
    2978:	ce 0f       	add	r28, r30
    297a:	d1 1d       	adc	r29, r1
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	ed 01       	movw	r28, r26
    2988:	08 95       	ret

0000298a <_exit>:
    298a:	f8 94       	cli

0000298c <__stop_program>:
    298c:	ff cf       	rjmp	.-2      	; 0x298c <__stop_program>
